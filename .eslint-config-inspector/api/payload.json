{
  "configs": [
    {
      "name": "eslint/defaults/languages",
      "languageOptions": {
        "sourceType": "module",
        "ecmaVersion": "latest",
        "parserOptions": {}
      },
      "linterOptions": {
        "reportUnusedDisableDirectives": 1
      },
      "index": 0
    },
    {
      "name": "eslint/defaults/ignores",
      "ignores": ["**/node_modules/", ".git/"],
      "index": 1
    },
    {
      "name": "eslint/defaults/files",
      "files": ["**/*.js", "**/*.mjs"],
      "index": 2
    },
    {
      "name": "eslint/defaults/files-cjs",
      "files": ["**/*.cjs"],
      "languageOptions": {
        "sourceType": "commonjs",
        "ecmaVersion": "latest"
      },
      "index": 3
    },
    {
      "rules": {
        "constructor-super": "error",
        "for-direction": "error",
        "getter-return": "error",
        "no-async-promise-executor": "error",
        "no-case-declarations": "error",
        "no-class-assign": "error",
        "no-compare-neg-zero": "error",
        "no-cond-assign": "error",
        "no-const-assign": "error",
        "no-constant-binary-expression": "error",
        "no-constant-condition": "error",
        "no-control-regex": "error",
        "no-debugger": "error",
        "no-delete-var": "error",
        "no-dupe-args": "error",
        "no-dupe-class-members": "error",
        "no-dupe-else-if": "error",
        "no-dupe-keys": "error",
        "no-duplicate-case": "error",
        "no-empty": "error",
        "no-empty-character-class": "error",
        "no-empty-pattern": "error",
        "no-empty-static-block": "error",
        "no-ex-assign": "error",
        "no-extra-boolean-cast": "error",
        "no-fallthrough": "error",
        "no-func-assign": "error",
        "no-global-assign": "error",
        "no-import-assign": "error",
        "no-invalid-regexp": "error",
        "no-irregular-whitespace": "error",
        "no-loss-of-precision": "error",
        "no-misleading-character-class": "error",
        "no-new-native-nonconstructor": "error",
        "no-nonoctal-decimal-escape": "error",
        "no-obj-calls": "error",
        "no-octal": "error",
        "no-prototype-builtins": "error",
        "no-redeclare": "error",
        "no-regex-spaces": "error",
        "no-self-assign": "error",
        "no-setter-return": "error",
        "no-shadow-restricted-names": "error",
        "no-sparse-arrays": "error",
        "no-this-before-super": "error",
        "no-undef": "error",
        "no-unexpected-multiline": "error",
        "no-unreachable": "error",
        "no-unsafe-finally": "error",
        "no-unsafe-negation": "error",
        "no-unsafe-optional-chaining": "error",
        "no-unused-labels": "error",
        "no-unused-private-class-members": "error",
        "no-unused-vars": "error",
        "no-useless-backreference": "error",
        "no-useless-catch": "error",
        "no-useless-escape": "error",
        "no-with": "error",
        "require-yield": "error",
        "use-isnan": "error",
        "valid-typeof": "error"
      },
      "name": "baseConfig",
      "files": ["src/**/*.js", "src/**/*.jsx", "src/**/*.ts", "src/**/*.tsx"],
      "index": 4
    },
    {
      "plugins": {
        "react": {}
      },
      "rules": {
        "react/display-name": 2,
        "react/jsx-key": 2,
        "react/jsx-no-comment-textnodes": 2,
        "react/jsx-no-duplicate-props": 2,
        "react/jsx-no-target-blank": 2,
        "react/jsx-no-undef": 2,
        "react/jsx-uses-react": 2,
        "react/jsx-uses-vars": 2,
        "react/no-children-prop": 2,
        "react/no-danger-with-children": 2,
        "react/no-deprecated": 2,
        "react/no-direct-mutation-state": 2,
        "react/no-find-dom-node": 2,
        "react/no-is-mounted": 2,
        "react/no-render-return-value": 2,
        "react/no-string-refs": 2,
        "react/no-unescaped-entities": 2,
        "react/no-unknown-property": 2,
        "react/no-unsafe": 0,
        "react/prop-types": 2,
        "react/react-in-jsx-scope": 2,
        "react/require-render-return": 2
      },
      "languageOptions": {
        "parserOptions": {
          "ecmaFeatures": {
            "jsx": true
          }
        }
      },
      "name": "reactConfig",
      "settings": {
        "react": {
          "version": "detect"
        }
      },
      "index": 5
    },
    {
      "name": "typescript-eslint/base",
      "languageOptions": {
        "parser": "typescript-eslint/parser",
        "sourceType": "module"
      },
      "plugins": {
        "@typescript-eslint": {}
      },
      "index": 6
    },
    {
      "files": ["**/*.ts", "**/*.tsx", "**/*.mts", "**/*.cts"],
      "rules": {
        "constructor-super": "off",
        "getter-return": "off",
        "no-class-assign": "off",
        "no-const-assign": "off",
        "no-dupe-args": "off",
        "no-dupe-class-members": "off",
        "no-dupe-keys": "off",
        "no-func-assign": "off",
        "no-import-assign": "off",
        "no-new-symbol": "off",
        "no-new-native-nonconstructor": "off",
        "no-obj-calls": "off",
        "no-redeclare": "off",
        "no-setter-return": "off",
        "no-this-before-super": "off",
        "no-undef": "off",
        "no-unreachable": "off",
        "no-unsafe-negation": "off",
        "no-var": "error",
        "prefer-const": "error",
        "prefer-rest-params": "error",
        "prefer-spread": "error",
        "no-with": "off"
      },
      "name": "typescript-eslint/eslint-recommended",
      "index": 7
    },
    {
      "name": "typescript-eslint/strict-type-checked",
      "rules": {
        "@typescript-eslint/await-thenable": "error",
        "@typescript-eslint/ban-ts-comment": [
          "error",
          {
            "minimumDescriptionLength": 10
          }
        ],
        "no-array-constructor": "off",
        "@typescript-eslint/no-array-constructor": "error",
        "@typescript-eslint/no-array-delete": "error",
        "@typescript-eslint/no-base-to-string": "error",
        "@typescript-eslint/no-confusing-void-expression": "error",
        "@typescript-eslint/no-deprecated": "error",
        "@typescript-eslint/no-duplicate-enum-values": "error",
        "@typescript-eslint/no-duplicate-type-constituents": "error",
        "@typescript-eslint/no-dynamic-delete": "error",
        "@typescript-eslint/no-empty-object-type": "error",
        "@typescript-eslint/no-explicit-any": "error",
        "@typescript-eslint/no-extra-non-null-assertion": "error",
        "@typescript-eslint/no-extraneous-class": "error",
        "@typescript-eslint/no-floating-promises": "error",
        "@typescript-eslint/no-for-in-array": "error",
        "no-implied-eval": "off",
        "@typescript-eslint/no-implied-eval": "error",
        "@typescript-eslint/no-invalid-void-type": "error",
        "@typescript-eslint/no-meaningless-void-operator": "error",
        "@typescript-eslint/no-misused-new": "error",
        "@typescript-eslint/no-misused-promises": "error",
        "@typescript-eslint/no-misused-spread": "error",
        "@typescript-eslint/no-mixed-enums": "error",
        "@typescript-eslint/no-namespace": "error",
        "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error",
        "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
        "@typescript-eslint/no-non-null-assertion": "error",
        "@typescript-eslint/no-redundant-type-constituents": "error",
        "@typescript-eslint/no-require-imports": "error",
        "@typescript-eslint/no-this-alias": "error",
        "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
        "@typescript-eslint/no-unnecessary-condition": "error",
        "@typescript-eslint/no-unnecessary-template-expression": "error",
        "@typescript-eslint/no-unnecessary-type-arguments": "error",
        "@typescript-eslint/no-unnecessary-type-assertion": "error",
        "@typescript-eslint/no-unnecessary-type-constraint": "error",
        "@typescript-eslint/no-unnecessary-type-parameters": "error",
        "@typescript-eslint/no-unsafe-argument": "error",
        "@typescript-eslint/no-unsafe-assignment": "error",
        "@typescript-eslint/no-unsafe-call": "error",
        "@typescript-eslint/no-unsafe-declaration-merging": "error",
        "@typescript-eslint/no-unsafe-enum-comparison": "error",
        "@typescript-eslint/no-unsafe-function-type": "error",
        "@typescript-eslint/no-unsafe-member-access": "error",
        "@typescript-eslint/no-unsafe-return": "error",
        "@typescript-eslint/no-unsafe-unary-minus": "error",
        "no-unused-expressions": "off",
        "@typescript-eslint/no-unused-expressions": "error",
        "no-unused-vars": "off",
        "@typescript-eslint/no-unused-vars": "error",
        "no-useless-constructor": "off",
        "@typescript-eslint/no-useless-constructor": "error",
        "@typescript-eslint/no-wrapper-object-types": "error",
        "no-throw-literal": "off",
        "@typescript-eslint/only-throw-error": "error",
        "@typescript-eslint/prefer-as-const": "error",
        "@typescript-eslint/prefer-literal-enum-member": "error",
        "@typescript-eslint/prefer-namespace-keyword": "error",
        "prefer-promise-reject-errors": "off",
        "@typescript-eslint/prefer-promise-reject-errors": "error",
        "@typescript-eslint/prefer-reduce-type-parameter": "error",
        "@typescript-eslint/prefer-return-this-type": "error",
        "@typescript-eslint/related-getter-setter-pairs": "error",
        "require-await": "off",
        "@typescript-eslint/require-await": "error",
        "@typescript-eslint/restrict-plus-operands": [
          "error",
          {
            "allowAny": false,
            "allowBoolean": false,
            "allowNullish": false,
            "allowNumberAndString": false,
            "allowRegExp": false
          }
        ],
        "@typescript-eslint/restrict-template-expressions": [
          "error",
          {
            "allowAny": false,
            "allowBoolean": false,
            "allowNever": false,
            "allowNullish": false,
            "allowNumber": false,
            "allowRegExp": false
          }
        ],
        "no-return-await": "off",
        "@typescript-eslint/return-await": ["error", "error-handling-correctness-only"],
        "@typescript-eslint/triple-slash-reference": "error",
        "@typescript-eslint/unbound-method": "error",
        "@typescript-eslint/unified-signatures": "error",
        "@typescript-eslint/use-unknown-in-catch-callback-variable": "error"
      },
      "index": 8
    },
    {
      "name": "typescript-eslint/base",
      "languageOptions": {
        "parser": "typescript-eslint/parser",
        "sourceType": "module"
      },
      "plugins": {
        "@typescript-eslint": {}
      },
      "index": 9
    },
    {
      "files": ["**/*.ts", "**/*.tsx", "**/*.mts", "**/*.cts"],
      "rules": {
        "constructor-super": "off",
        "getter-return": "off",
        "no-class-assign": "off",
        "no-const-assign": "off",
        "no-dupe-args": "off",
        "no-dupe-class-members": "off",
        "no-dupe-keys": "off",
        "no-func-assign": "off",
        "no-import-assign": "off",
        "no-new-symbol": "off",
        "no-new-native-nonconstructor": "off",
        "no-obj-calls": "off",
        "no-redeclare": "off",
        "no-setter-return": "off",
        "no-this-before-super": "off",
        "no-undef": "off",
        "no-unreachable": "off",
        "no-unsafe-negation": "off",
        "no-var": "error",
        "prefer-const": "error",
        "prefer-rest-params": "error",
        "prefer-spread": "error",
        "no-with": "off"
      },
      "name": "typescript-eslint/eslint-recommended",
      "index": 10
    },
    {
      "name": "typescript-eslint/stylistic-type-checked",
      "rules": {
        "@typescript-eslint/adjacent-overload-signatures": "error",
        "@typescript-eslint/array-type": "error",
        "@typescript-eslint/ban-tslint-comment": "error",
        "@typescript-eslint/class-literal-property-style": "error",
        "@typescript-eslint/consistent-generic-constructors": "error",
        "@typescript-eslint/consistent-indexed-object-style": "error",
        "@typescript-eslint/consistent-type-assertions": "error",
        "@typescript-eslint/consistent-type-definitions": "error",
        "dot-notation": "off",
        "@typescript-eslint/dot-notation": "error",
        "@typescript-eslint/no-confusing-non-null-assertion": "error",
        "no-empty-function": "off",
        "@typescript-eslint/no-empty-function": "error",
        "@typescript-eslint/no-inferrable-types": "error",
        "@typescript-eslint/non-nullable-type-assertion-style": "error",
        "@typescript-eslint/prefer-find": "error",
        "@typescript-eslint/prefer-for-of": "error",
        "@typescript-eslint/prefer-function-type": "error",
        "@typescript-eslint/prefer-includes": "error",
        "@typescript-eslint/prefer-nullish-coalescing": "error",
        "@typescript-eslint/prefer-optional-chain": "error",
        "@typescript-eslint/prefer-regexp-exec": "error",
        "@typescript-eslint/prefer-string-starts-ends-with": "error"
      },
      "index": 11
    },
    {
      "name": "typescriptConfig",
      "languageOptions": {
        "parserOptions": {
          "projectService": true,
          "tsconfigRootDir": "/Users/bgevko/Projects/bogdan-os"
        }
      },
      "index": 12
    }
  ],
  "rules": {
    "accessor-pairs": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "enforceForClassMembers": true,
          "getWithoutSet": false,
          "setWithoutGet": true
        }
      ],
      "docs": {
        "description": "Enforce getter and setter pairs in objects and classes",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/accessor-pairs"
      },
      "name": "accessor-pairs",
      "plugin": "eslint"
    },
    "array-bracket-newline": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "array-bracket-newline",
              "url": "https://eslint.style/rules/js/array-bracket-newline"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce linebreaks after opening and before closing array brackets",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/array-bracket-newline"
      },
      "fixable": "whitespace",
      "name": "array-bracket-newline",
      "plugin": "eslint"
    },
    "array-bracket-spacing": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "array-bracket-spacing",
              "url": "https://eslint.style/rules/js/array-bracket-spacing"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing inside array brackets",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/array-bracket-spacing"
      },
      "fixable": "whitespace",
      "name": "array-bracket-spacing",
      "plugin": "eslint"
    },
    "array-callback-return": {
      "type": "problem",
      "defaultOptions": [
        {
          "allowImplicit": false,
          "checkForEach": false,
          "allowVoid": false
        }
      ],
      "docs": {
        "description": "Enforce `return` statements in callbacks of array methods",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/array-callback-return"
      },
      "hasSuggestions": true,
      "name": "array-callback-return",
      "plugin": "eslint"
    },
    "array-element-newline": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "array-element-newline",
              "url": "https://eslint.style/rules/js/array-element-newline"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce line breaks after each array element",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/array-element-newline"
      },
      "fixable": "whitespace",
      "name": "array-element-newline",
      "plugin": "eslint"
    },
    "arrow-body-style": {
      "type": "suggestion",
      "defaultOptions": ["as-needed"],
      "docs": {
        "description": "Require braces around arrow function bodies",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/arrow-body-style"
      },
      "fixable": "code",
      "name": "arrow-body-style",
      "plugin": "eslint"
    },
    "arrow-parens": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "arrow-parens",
              "url": "https://eslint.style/rules/js/arrow-parens"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Require parentheses around arrow function arguments",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/arrow-parens"
      },
      "fixable": "code",
      "name": "arrow-parens",
      "plugin": "eslint"
    },
    "arrow-spacing": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "arrow-spacing",
              "url": "https://eslint.style/rules/js/arrow-spacing"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing before and after the arrow in arrow functions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/arrow-spacing"
      },
      "fixable": "whitespace",
      "name": "arrow-spacing",
      "plugin": "eslint"
    },
    "block-scoped-var": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce the use of variables within the scope they are defined",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/block-scoped-var"
      },
      "name": "block-scoped-var",
      "plugin": "eslint"
    },
    "block-spacing": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "block-spacing",
              "url": "https://eslint.style/rules/js/block-spacing"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Disallow or enforce spaces inside of blocks after opening block and before closing block",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/block-spacing"
      },
      "fixable": "whitespace",
      "name": "block-spacing",
      "plugin": "eslint"
    },
    "brace-style": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "brace-style",
              "url": "https://eslint.style/rules/js/brace-style"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce consistent brace style for blocks",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/brace-style"
      },
      "fixable": "whitespace",
      "name": "brace-style",
      "plugin": "eslint"
    },
    "callback-return": {
      "deprecated": {
        "message": "Node.js rules were moved out of ESLint core.",
        "url": "https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules",
        "deprecatedSince": "7.0.0",
        "availableUntil": null,
        "replacedBy": [
          {
            "message": "eslint-plugin-n now maintains deprecated Node.js-related rules.",
            "plugin": {
              "name": "eslint-plugin-n",
              "url": "https://github.com/eslint-community/eslint-plugin-n"
            },
            "rule": {
              "name": "callback-return",
              "url": "https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/callback-return.md"
            }
          }
        ]
      },
      "type": "suggestion",
      "docs": {
        "description": "Require `return` statements after callbacks",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/callback-return"
      },
      "name": "callback-return",
      "plugin": "eslint"
    },
    "camelcase": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "allow": [],
          "ignoreDestructuring": false,
          "ignoreGlobals": false,
          "ignoreImports": false,
          "properties": "always"
        }
      ],
      "docs": {
        "description": "Enforce camelcase naming convention",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/camelcase"
      },
      "name": "camelcase",
      "plugin": "eslint"
    },
    "capitalized-comments": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce or disallow capitalization of the first letter of a comment",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/capitalized-comments"
      },
      "fixable": "code",
      "name": "capitalized-comments",
      "plugin": "eslint"
    },
    "class-methods-use-this": {
      "dialects": ["javascript", "typescript"],
      "language": "javascript",
      "type": "suggestion",
      "defaultOptions": [
        {
          "enforceForClassFields": true,
          "exceptMethods": [],
          "ignoreOverrideMethods": false
        }
      ],
      "docs": {
        "description": "Enforce that class methods utilize `this`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/class-methods-use-this"
      },
      "name": "class-methods-use-this",
      "plugin": "eslint"
    },
    "comma-dangle": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "comma-dangle",
              "url": "https://eslint.style/rules/js/comma-dangle"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Require or disallow trailing commas",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/comma-dangle"
      },
      "fixable": "code",
      "name": "comma-dangle",
      "plugin": "eslint"
    },
    "comma-spacing": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "comma-spacing",
              "url": "https://eslint.style/rules/js/comma-spacing"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing before and after commas",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/comma-spacing"
      },
      "fixable": "whitespace",
      "name": "comma-spacing",
      "plugin": "eslint"
    },
    "comma-style": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "comma-style",
              "url": "https://eslint.style/rules/js/comma-style"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce consistent comma style",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/comma-style"
      },
      "fixable": "code",
      "name": "comma-style",
      "plugin": "eslint"
    },
    "complexity": {
      "type": "suggestion",
      "defaultOptions": [20],
      "docs": {
        "description": "Enforce a maximum cyclomatic complexity allowed in a program",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/complexity"
      },
      "name": "complexity",
      "plugin": "eslint"
    },
    "computed-property-spacing": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "computed-property-spacing",
              "url": "https://eslint.style/rules/js/computed-property-spacing"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing inside computed property brackets",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/computed-property-spacing"
      },
      "fixable": "whitespace",
      "name": "computed-property-spacing",
      "plugin": "eslint"
    },
    "consistent-return": {
      "type": "suggestion",
      "docs": {
        "description": "Require `return` statements to either always or never specify values",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/consistent-return"
      },
      "defaultOptions": [
        {
          "treatUndefinedAsUnspecified": false
        }
      ],
      "name": "consistent-return",
      "plugin": "eslint"
    },
    "consistent-this": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce consistent naming when capturing the current execution context",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/consistent-this"
      },
      "defaultOptions": ["that"],
      "name": "consistent-this",
      "plugin": "eslint"
    },
    "constructor-super": {
      "type": "problem",
      "docs": {
        "description": "Require `super()` calls in constructors",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/constructor-super"
      },
      "name": "constructor-super",
      "plugin": "eslint"
    },
    "curly": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce consistent brace style for all control statements",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/curly"
      },
      "defaultOptions": ["all"],
      "fixable": "code",
      "name": "curly",
      "plugin": "eslint"
    },
    "default-case": {
      "type": "suggestion",
      "defaultOptions": [{}],
      "docs": {
        "description": "Require `default` cases in `switch` statements",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/default-case"
      },
      "name": "default-case",
      "plugin": "eslint"
    },
    "default-case-last": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce `default` clauses in `switch` statements to be last",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/default-case-last"
      },
      "name": "default-case-last",
      "plugin": "eslint"
    },
    "default-param-last": {
      "dialects": ["javascript", "typescript"],
      "language": "javascript",
      "type": "suggestion",
      "docs": {
        "description": "Enforce default parameters to be last",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/default-param-last"
      },
      "name": "default-param-last",
      "plugin": "eslint"
    },
    "dot-location": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "dot-location",
              "url": "https://eslint.style/rules/js/dot-location"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce consistent newlines before and after dots",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/dot-location"
      },
      "fixable": "code",
      "name": "dot-location",
      "plugin": "eslint"
    },
    "dot-notation": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "allowKeywords": true,
          "allowPattern": ""
        }
      ],
      "docs": {
        "description": "Enforce dot notation whenever possible",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/dot-notation"
      },
      "fixable": "code",
      "name": "dot-notation",
      "plugin": "eslint"
    },
    "eol-last": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "eol-last",
              "url": "https://eslint.style/rules/js/eol-last"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Require or disallow newline at the end of files",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/eol-last"
      },
      "fixable": "whitespace",
      "name": "eol-last",
      "plugin": "eslint"
    },
    "eqeqeq": {
      "type": "suggestion",
      "docs": {
        "description": "Require the use of `===` and `!==`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/eqeqeq"
      },
      "fixable": "code",
      "name": "eqeqeq",
      "plugin": "eslint"
    },
    "for-direction": {
      "type": "problem",
      "docs": {
        "description": "Enforce `for` loop update clause moving the counter in the right direction",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/for-direction"
      },
      "fixable": null,
      "name": "for-direction",
      "plugin": "eslint"
    },
    "func-call-spacing": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "function-call-spacing",
              "url": "https://eslint.style/rules/js/function-call-spacing"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Require or disallow spacing between function identifiers and their invocations",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/func-call-spacing"
      },
      "fixable": "whitespace",
      "name": "func-call-spacing",
      "plugin": "eslint"
    },
    "func-name-matching": {
      "type": "suggestion",
      "docs": {
        "description": "Require function names to match the name of the variable or property to which they are assigned",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/func-name-matching"
      },
      "name": "func-name-matching",
      "plugin": "eslint"
    },
    "func-names": {
      "type": "suggestion",
      "defaultOptions": ["always", {}],
      "docs": {
        "description": "Require or disallow named `function` expressions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/func-names"
      },
      "name": "func-names",
      "plugin": "eslint"
    },
    "func-style": {
      "type": "suggestion",
      "defaultOptions": [
        "expression",
        {
          "allowArrowFunctions": false,
          "overrides": {}
        }
      ],
      "docs": {
        "description": "Enforce the consistent use of either `function` declarations or expressions assigned to variables",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/func-style"
      },
      "name": "func-style",
      "plugin": "eslint"
    },
    "function-call-argument-newline": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "function-call-argument-newline",
              "url": "https://eslint.style/rules/js/function-call-argument-newline"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce line breaks between arguments of a function call",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/function-call-argument-newline"
      },
      "fixable": "whitespace",
      "name": "function-call-argument-newline",
      "plugin": "eslint"
    },
    "function-paren-newline": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "function-paren-newline",
              "url": "https://eslint.style/rules/js/function-paren-newline"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce consistent line breaks inside function parentheses",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/function-paren-newline"
      },
      "fixable": "whitespace",
      "name": "function-paren-newline",
      "plugin": "eslint"
    },
    "generator-star-spacing": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "generator-star-spacing",
              "url": "https://eslint.style/rules/js/generator-star-spacing"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing around `*` operators in generator functions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/generator-star-spacing"
      },
      "fixable": "whitespace",
      "name": "generator-star-spacing",
      "plugin": "eslint"
    },
    "getter-return": {
      "type": "problem",
      "defaultOptions": [
        {
          "allowImplicit": false
        }
      ],
      "docs": {
        "description": "Enforce `return` statements in getters",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/getter-return"
      },
      "fixable": null,
      "name": "getter-return",
      "plugin": "eslint"
    },
    "global-require": {
      "deprecated": {
        "message": "Node.js rules were moved out of ESLint core.",
        "url": "https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules",
        "deprecatedSince": "7.0.0",
        "availableUntil": null,
        "replacedBy": [
          {
            "message": "eslint-plugin-n now maintains deprecated Node.js-related rules.",
            "plugin": {
              "name": "eslint-plugin-n",
              "url": "https://github.com/eslint-community/eslint-plugin-n"
            },
            "rule": {
              "name": "global-require",
              "url": "https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/global-require.md"
            }
          }
        ]
      },
      "type": "suggestion",
      "docs": {
        "description": "Require `require()` calls to be placed at top-level module scope",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/global-require"
      },
      "name": "global-require",
      "plugin": "eslint"
    },
    "grouped-accessor-pairs": {
      "type": "suggestion",
      "defaultOptions": ["anyOrder"],
      "docs": {
        "description": "Require grouped accessor pairs in object literals and classes",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/grouped-accessor-pairs"
      },
      "name": "grouped-accessor-pairs",
      "plugin": "eslint"
    },
    "guard-for-in": {
      "type": "suggestion",
      "docs": {
        "description": "Require `for-in` loops to include an `if` statement",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/guard-for-in"
      },
      "name": "guard-for-in",
      "plugin": "eslint"
    },
    "handle-callback-err": {
      "deprecated": {
        "message": "Node.js rules were moved out of ESLint core.",
        "url": "https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules",
        "deprecatedSince": "7.0.0",
        "availableUntil": null,
        "replacedBy": [
          {
            "message": "eslint-plugin-n now maintains deprecated Node.js-related rules.",
            "plugin": {
              "name": "eslint-plugin-n",
              "url": "https://github.com/eslint-community/eslint-plugin-n"
            },
            "rule": {
              "name": "handle-callback-err",
              "url": "https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/handle-callback-err.md"
            }
          }
        ]
      },
      "type": "suggestion",
      "docs": {
        "description": "Require error handling in callbacks",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/handle-callback-err"
      },
      "name": "handle-callback-err",
      "plugin": "eslint"
    },
    "id-blacklist": {
      "deprecated": {
        "message": "The rule was renamed.",
        "url": "https://eslint.org/blog/2020/07/eslint-v7.5.0-released/#deprecating-id-blacklist",
        "deprecatedSince": "7.5.0",
        "availableUntil": null,
        "replacedBy": [
          {
            "rule": {
              "name": "id-denylist",
              "url": "https://eslint.org/docs/rules/id-denylist"
            }
          }
        ]
      },
      "type": "suggestion",
      "docs": {
        "description": "Disallow specified identifiers",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/id-blacklist"
      },
      "name": "id-blacklist",
      "plugin": "eslint"
    },
    "id-denylist": {
      "type": "suggestion",
      "defaultOptions": [],
      "docs": {
        "description": "Disallow specified identifiers",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/id-denylist"
      },
      "name": "id-denylist",
      "plugin": "eslint"
    },
    "id-length": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "exceptionPatterns": [],
          "exceptions": [],
          "min": 2,
          "properties": "always"
        }
      ],
      "docs": {
        "description": "Enforce minimum and maximum identifier lengths",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/id-length"
      },
      "name": "id-length",
      "plugin": "eslint"
    },
    "id-match": {
      "type": "suggestion",
      "defaultOptions": [
        "^.+$",
        {
          "classFields": false,
          "ignoreDestructuring": false,
          "onlyDeclarations": false,
          "properties": false
        }
      ],
      "docs": {
        "description": "Require identifiers to match a specified regular expression",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/id-match"
      },
      "name": "id-match",
      "plugin": "eslint"
    },
    "implicit-arrow-linebreak": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "implicit-arrow-linebreak",
              "url": "https://eslint.style/rules/js/implicit-arrow-linebreak"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce the location of arrow function bodies",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/implicit-arrow-linebreak"
      },
      "fixable": "whitespace",
      "name": "implicit-arrow-linebreak",
      "plugin": "eslint"
    },
    "indent": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "indent",
              "url": "https://eslint.style/rules/js/indent"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce consistent indentation",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/indent"
      },
      "fixable": "whitespace",
      "name": "indent",
      "plugin": "eslint"
    },
    "indent-legacy": {
      "type": "layout",
      "docs": {
        "description": "Enforce consistent indentation",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/indent-legacy"
      },
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "4.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "indent",
              "url": "https://eslint.style/rules/js/indent"
            }
          }
        ]
      },
      "fixable": "whitespace",
      "name": "indent-legacy",
      "plugin": "eslint"
    },
    "init-declarations": {
      "type": "suggestion",
      "dialects": ["typescript", "javascript"],
      "language": "javascript",
      "docs": {
        "description": "Require or disallow initialization in variable declarations",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/init-declarations"
      },
      "name": "init-declarations",
      "plugin": "eslint"
    },
    "jsx-quotes": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "jsx-quotes",
              "url": "https://eslint.style/rules/js/jsx-quotes"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce the consistent use of either double or single quotes in JSX attributes",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/jsx-quotes"
      },
      "fixable": "whitespace",
      "name": "jsx-quotes",
      "plugin": "eslint"
    },
    "key-spacing": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "key-spacing",
              "url": "https://eslint.style/rules/js/key-spacing"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing between keys and values in object literal properties",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/key-spacing"
      },
      "fixable": "whitespace",
      "name": "key-spacing",
      "plugin": "eslint"
    },
    "keyword-spacing": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "keyword-spacing",
              "url": "https://eslint.style/rules/js/keyword-spacing"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing before and after keywords",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/keyword-spacing"
      },
      "fixable": "whitespace",
      "name": "keyword-spacing",
      "plugin": "eslint"
    },
    "line-comment-position": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "9.3.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "line-comment-position",
              "url": "https://eslint.style/rules/js/line-comment-position"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce position of line comments",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/line-comment-position"
      },
      "name": "line-comment-position",
      "plugin": "eslint"
    },
    "linebreak-style": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "linebreak-style",
              "url": "https://eslint.style/rules/js/linebreak-style"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce consistent linebreak style",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/linebreak-style"
      },
      "fixable": "whitespace",
      "name": "linebreak-style",
      "plugin": "eslint"
    },
    "lines-around-comment": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "lines-around-comment",
              "url": "https://eslint.style/rules/js/lines-around-comment"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Require empty lines around comments",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/lines-around-comment"
      },
      "fixable": "whitespace",
      "name": "lines-around-comment",
      "plugin": "eslint"
    },
    "lines-around-directive": {
      "type": "layout",
      "docs": {
        "description": "Require or disallow newlines around directives",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/lines-around-directive"
      },
      "fixable": "whitespace",
      "deprecated": {
        "message": "The rule was replaced with a more general rule.",
        "url": "https://eslint.org/blog/2017/06/eslint-v4.0.0-released/",
        "deprecatedSince": "4.0.0",
        "availableUntil": null,
        "replacedBy": [
          {
            "message": "The new rule moved to a plugin.",
            "url": "https://eslint.org/docs/latest/rules/padding-line-between-statements#examples",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "padding-line-between-statements",
              "url": "https://eslint.style/rules/js/padding-line-between-statements"
            }
          }
        ]
      },
      "name": "lines-around-directive",
      "plugin": "eslint"
    },
    "lines-between-class-members": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "lines-between-class-members",
              "url": "https://eslint.style/rules/js/lines-between-class-members"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Require or disallow an empty line between class members",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/lines-between-class-members"
      },
      "fixable": "whitespace",
      "name": "lines-between-class-members",
      "plugin": "eslint"
    },
    "logical-assignment-operators": {
      "type": "suggestion",
      "docs": {
        "description": "Require or disallow logical assignment operator shorthand",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/logical-assignment-operators"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "logical-assignment-operators",
      "plugin": "eslint"
    },
    "max-classes-per-file": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce a maximum number of classes per file",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/max-classes-per-file"
      },
      "name": "max-classes-per-file",
      "plugin": "eslint"
    },
    "max-depth": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce a maximum depth that blocks can be nested",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/max-depth"
      },
      "name": "max-depth",
      "plugin": "eslint"
    },
    "max-len": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "max-len",
              "url": "https://eslint.style/rules/js/max-len"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce a maximum line length",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/max-len"
      },
      "name": "max-len",
      "plugin": "eslint"
    },
    "max-lines": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce a maximum number of lines per file",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/max-lines"
      },
      "name": "max-lines",
      "plugin": "eslint"
    },
    "max-lines-per-function": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce a maximum number of lines of code in a function",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/max-lines-per-function"
      },
      "name": "max-lines-per-function",
      "plugin": "eslint"
    },
    "max-nested-callbacks": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce a maximum depth that callbacks can be nested",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/max-nested-callbacks"
      },
      "name": "max-nested-callbacks",
      "plugin": "eslint"
    },
    "max-params": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce a maximum number of parameters in function definitions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/max-params"
      },
      "name": "max-params",
      "plugin": "eslint"
    },
    "max-statements": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce a maximum number of statements allowed in function blocks",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/max-statements"
      },
      "name": "max-statements",
      "plugin": "eslint"
    },
    "max-statements-per-line": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "max-statements-per-line",
              "url": "https://eslint.style/rules/js/max-statements-per-line"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce a maximum number of statements allowed per line",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/max-statements-per-line"
      },
      "name": "max-statements-per-line",
      "plugin": "eslint"
    },
    "multiline-comment-style": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "9.3.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "multiline-comment-style",
              "url": "https://eslint.style/rules/js/multiline-comment-style"
            }
          }
        ]
      },
      "type": "suggestion",
      "docs": {
        "description": "Enforce a particular style for multiline comments",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/multiline-comment-style"
      },
      "fixable": "whitespace",
      "name": "multiline-comment-style",
      "plugin": "eslint"
    },
    "multiline-ternary": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "multiline-ternary",
              "url": "https://eslint.style/rules/js/multiline-ternary"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce newlines between operands of ternary expressions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/multiline-ternary"
      },
      "fixable": "whitespace",
      "name": "multiline-ternary",
      "plugin": "eslint"
    },
    "new-cap": {
      "type": "suggestion",
      "docs": {
        "description": "Require constructor names to begin with a capital letter",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/new-cap"
      },
      "defaultOptions": [
        {
          "capIsNew": true,
          "capIsNewExceptions": [
            "Array",
            "Boolean",
            "Date",
            "Error",
            "Function",
            "Number",
            "Object",
            "RegExp",
            "String",
            "Symbol",
            "BigInt"
          ],
          "newIsCap": true,
          "newIsCapExceptions": [],
          "properties": true
        }
      ],
      "name": "new-cap",
      "plugin": "eslint"
    },
    "new-parens": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "new-parens",
              "url": "https://eslint.style/rules/js/new-parens"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce or disallow parentheses when invoking a constructor with no arguments",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/new-parens"
      },
      "fixable": "code",
      "name": "new-parens",
      "plugin": "eslint"
    },
    "newline-after-var": {
      "type": "layout",
      "docs": {
        "description": "Require or disallow an empty line after variable declarations",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/newline-after-var"
      },
      "fixable": "whitespace",
      "deprecated": {
        "message": "The rule was replaced with a more general rule.",
        "url": "https://eslint.org/blog/2017/06/eslint-v4.0.0-released/",
        "deprecatedSince": "4.0.0",
        "availableUntil": null,
        "replacedBy": [
          {
            "message": "The new rule moved to a plugin.",
            "url": "https://eslint.org/docs/latest/rules/padding-line-between-statements#examples",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "padding-line-between-statements",
              "url": "https://eslint.style/rules/js/padding-line-between-statements"
            }
          }
        ]
      },
      "name": "newline-after-var",
      "plugin": "eslint"
    },
    "newline-before-return": {
      "type": "layout",
      "docs": {
        "description": "Require an empty line before `return` statements",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/newline-before-return"
      },
      "fixable": "whitespace",
      "deprecated": {
        "message": "The rule was replaced with a more general rule.",
        "url": "https://eslint.org/blog/2017/06/eslint-v4.0.0-released/",
        "deprecatedSince": "4.0.0",
        "availableUntil": null,
        "replacedBy": [
          {
            "message": "The new rule moved to a plugin.",
            "url": "https://eslint.org/docs/latest/rules/padding-line-between-statements#examples",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "padding-line-between-statements",
              "url": "https://eslint.style/rules/js/padding-line-between-statements"
            }
          }
        ]
      },
      "name": "newline-before-return",
      "plugin": "eslint"
    },
    "newline-per-chained-call": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "newline-per-chained-call",
              "url": "https://eslint.style/rules/js/newline-per-chained-call"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Require a newline after each call in a method chain",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/newline-per-chained-call"
      },
      "fixable": "whitespace",
      "name": "newline-per-chained-call",
      "plugin": "eslint"
    },
    "no-alert": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow the use of `alert`, `confirm`, and `prompt`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-alert"
      },
      "name": "no-alert",
      "plugin": "eslint"
    },
    "no-array-constructor": {
      "dialects": ["javascript", "typescript"],
      "language": "javascript",
      "type": "suggestion",
      "docs": {
        "description": "Disallow `Array` constructors",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-array-constructor"
      },
      "hasSuggestions": true,
      "name": "no-array-constructor",
      "plugin": "eslint"
    },
    "no-async-promise-executor": {
      "type": "problem",
      "docs": {
        "description": "Disallow using an async function as a Promise executor",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-async-promise-executor"
      },
      "fixable": null,
      "name": "no-async-promise-executor",
      "plugin": "eslint"
    },
    "no-await-in-loop": {
      "type": "problem",
      "docs": {
        "description": "Disallow `await` inside of loops",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-await-in-loop"
      },
      "name": "no-await-in-loop",
      "plugin": "eslint"
    },
    "no-bitwise": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "allow": [],
          "int32Hint": false
        }
      ],
      "docs": {
        "description": "Disallow bitwise operators",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-bitwise"
      },
      "name": "no-bitwise",
      "plugin": "eslint"
    },
    "no-buffer-constructor": {
      "deprecated": {
        "message": "Node.js rules were moved out of ESLint core.",
        "url": "https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules",
        "deprecatedSince": "7.0.0",
        "availableUntil": null,
        "replacedBy": [
          {
            "message": "eslint-plugin-n now maintains deprecated Node.js-related rules.",
            "plugin": {
              "name": "eslint-plugin-n",
              "url": "https://github.com/eslint-community/eslint-plugin-n"
            },
            "rule": {
              "name": "no-deprecated-api",
              "url": "https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-deprecated-api.md"
            }
          }
        ]
      },
      "type": "problem",
      "docs": {
        "description": "Disallow use of the `Buffer()` constructor",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-buffer-constructor"
      },
      "name": "no-buffer-constructor",
      "plugin": "eslint"
    },
    "no-caller": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow the use of `arguments.caller` or `arguments.callee`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-caller"
      },
      "name": "no-caller",
      "plugin": "eslint"
    },
    "no-case-declarations": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow lexical declarations in case clauses",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-case-declarations"
      },
      "hasSuggestions": true,
      "name": "no-case-declarations",
      "plugin": "eslint"
    },
    "no-catch-shadow": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow `catch` clause parameters from shadowing variables in the outer scope",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-catch-shadow"
      },
      "deprecated": {
        "message": "This rule was renamed.",
        "url": "https://eslint.org/blog/2018/07/eslint-v5.1.0-released/",
        "deprecatedSince": "5.1.0",
        "availableUntil": null,
        "replacedBy": [
          {
            "rule": {
              "name": "no-shadow",
              "url": "https://eslint.org/docs/rules/no-shadow"
            }
          }
        ]
      },
      "name": "no-catch-shadow",
      "plugin": "eslint"
    },
    "no-class-assign": {
      "type": "problem",
      "docs": {
        "description": "Disallow reassigning class members",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-class-assign"
      },
      "name": "no-class-assign",
      "plugin": "eslint"
    },
    "no-compare-neg-zero": {
      "type": "problem",
      "docs": {
        "description": "Disallow comparing against `-0`",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-compare-neg-zero"
      },
      "fixable": null,
      "name": "no-compare-neg-zero",
      "plugin": "eslint"
    },
    "no-cond-assign": {
      "type": "problem",
      "defaultOptions": ["except-parens"],
      "docs": {
        "description": "Disallow assignment operators in conditional expressions",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-cond-assign"
      },
      "name": "no-cond-assign",
      "plugin": "eslint"
    },
    "no-confusing-arrow": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "no-confusing-arrow",
              "url": "https://eslint.style/rules/js/no-confusing-arrow"
            }
          }
        ]
      },
      "type": "suggestion",
      "docs": {
        "description": "Disallow arrow functions where they could be confused with comparisons",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-confusing-arrow"
      },
      "fixable": "code",
      "name": "no-confusing-arrow",
      "plugin": "eslint"
    },
    "no-console": {
      "type": "suggestion",
      "defaultOptions": [{}],
      "docs": {
        "description": "Disallow the use of `console`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-console"
      },
      "hasSuggestions": true,
      "name": "no-console",
      "plugin": "eslint"
    },
    "no-const-assign": {
      "type": "problem",
      "docs": {
        "description": "Disallow reassigning `const` variables",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-const-assign"
      },
      "name": "no-const-assign",
      "plugin": "eslint"
    },
    "no-constant-binary-expression": {
      "type": "problem",
      "docs": {
        "description": "Disallow expressions where the operation doesn't affect the value",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-constant-binary-expression"
      },
      "name": "no-constant-binary-expression",
      "plugin": "eslint"
    },
    "no-constant-condition": {
      "type": "problem",
      "defaultOptions": [
        {
          "checkLoops": "allExceptWhileTrue"
        }
      ],
      "docs": {
        "description": "Disallow constant expressions in conditions",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-constant-condition"
      },
      "name": "no-constant-condition",
      "plugin": "eslint"
    },
    "no-constructor-return": {
      "type": "problem",
      "docs": {
        "description": "Disallow returning value from constructor",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-constructor-return"
      },
      "fixable": null,
      "name": "no-constructor-return",
      "plugin": "eslint"
    },
    "no-continue": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow `continue` statements",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-continue"
      },
      "name": "no-continue",
      "plugin": "eslint"
    },
    "no-control-regex": {
      "type": "problem",
      "docs": {
        "description": "Disallow control characters in regular expressions",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-control-regex"
      },
      "name": "no-control-regex",
      "plugin": "eslint"
    },
    "no-debugger": {
      "type": "problem",
      "docs": {
        "description": "Disallow the use of `debugger`",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-debugger"
      },
      "fixable": null,
      "name": "no-debugger",
      "plugin": "eslint"
    },
    "no-delete-var": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow deleting variables",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-delete-var"
      },
      "name": "no-delete-var",
      "plugin": "eslint"
    },
    "no-div-regex": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow equal signs explicitly at the beginning of regular expressions",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-div-regex"
      },
      "fixable": "code",
      "name": "no-div-regex",
      "plugin": "eslint"
    },
    "no-dupe-args": {
      "type": "problem",
      "docs": {
        "description": "Disallow duplicate arguments in `function` definitions",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-dupe-args"
      },
      "name": "no-dupe-args",
      "plugin": "eslint"
    },
    "no-dupe-class-members": {
      "type": "problem",
      "dialects": ["javascript", "typescript"],
      "language": "javascript",
      "docs": {
        "description": "Disallow duplicate class members",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-dupe-class-members"
      },
      "name": "no-dupe-class-members",
      "plugin": "eslint"
    },
    "no-dupe-else-if": {
      "type": "problem",
      "docs": {
        "description": "Disallow duplicate conditions in if-else-if chains",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-dupe-else-if"
      },
      "name": "no-dupe-else-if",
      "plugin": "eslint"
    },
    "no-dupe-keys": {
      "type": "problem",
      "docs": {
        "description": "Disallow duplicate keys in object literals",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-dupe-keys"
      },
      "name": "no-dupe-keys",
      "plugin": "eslint"
    },
    "no-duplicate-case": {
      "type": "problem",
      "docs": {
        "description": "Disallow duplicate case labels",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-duplicate-case"
      },
      "name": "no-duplicate-case",
      "plugin": "eslint"
    },
    "no-duplicate-imports": {
      "type": "problem",
      "defaultOptions": [
        {
          "includeExports": false
        }
      ],
      "docs": {
        "description": "Disallow duplicate module imports",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-duplicate-imports"
      },
      "name": "no-duplicate-imports",
      "plugin": "eslint"
    },
    "no-else-return": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "allowElseIf": true
        }
      ],
      "docs": {
        "description": "Disallow `else` blocks after `return` statements in `if` statements",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-else-return"
      },
      "fixable": "code",
      "name": "no-else-return",
      "plugin": "eslint"
    },
    "no-empty": {
      "hasSuggestions": true,
      "type": "suggestion",
      "defaultOptions": [
        {
          "allowEmptyCatch": false
        }
      ],
      "docs": {
        "description": "Disallow empty block statements",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-empty"
      },
      "name": "no-empty",
      "plugin": "eslint"
    },
    "no-empty-character-class": {
      "type": "problem",
      "docs": {
        "description": "Disallow empty character classes in regular expressions",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-empty-character-class"
      },
      "name": "no-empty-character-class",
      "plugin": "eslint"
    },
    "no-empty-function": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "allow": []
        }
      ],
      "docs": {
        "description": "Disallow empty functions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-empty-function"
      },
      "name": "no-empty-function",
      "plugin": "eslint"
    },
    "no-empty-pattern": {
      "type": "problem",
      "defaultOptions": [
        {
          "allowObjectPatternsAsParameters": false
        }
      ],
      "docs": {
        "description": "Disallow empty destructuring patterns",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-empty-pattern"
      },
      "name": "no-empty-pattern",
      "plugin": "eslint"
    },
    "no-empty-static-block": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow empty static blocks",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-empty-static-block"
      },
      "name": "no-empty-static-block",
      "plugin": "eslint"
    },
    "no-eq-null": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow `null` comparisons without type-checking operators",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-eq-null"
      },
      "name": "no-eq-null",
      "plugin": "eslint"
    },
    "no-eval": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "allowIndirect": false
        }
      ],
      "docs": {
        "description": "Disallow the use of `eval()`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-eval"
      },
      "name": "no-eval",
      "plugin": "eslint"
    },
    "no-ex-assign": {
      "type": "problem",
      "docs": {
        "description": "Disallow reassigning exceptions in `catch` clauses",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-ex-assign"
      },
      "name": "no-ex-assign",
      "plugin": "eslint"
    },
    "no-extend-native": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "exceptions": []
        }
      ],
      "docs": {
        "description": "Disallow extending native types",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-extend-native"
      },
      "name": "no-extend-native",
      "plugin": "eslint"
    },
    "no-extra-bind": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow unnecessary calls to `.bind()`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-extra-bind"
      },
      "fixable": "code",
      "name": "no-extra-bind",
      "plugin": "eslint"
    },
    "no-extra-boolean-cast": {
      "type": "suggestion",
      "defaultOptions": [{}],
      "docs": {
        "description": "Disallow unnecessary boolean casts",
        "recommended": true,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-extra-boolean-cast"
      },
      "fixable": "code",
      "name": "no-extra-boolean-cast",
      "plugin": "eslint"
    },
    "no-extra-label": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow unnecessary labels",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-extra-label"
      },
      "fixable": "code",
      "name": "no-extra-label",
      "plugin": "eslint"
    },
    "no-extra-parens": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "no-extra-parens",
              "url": "https://eslint.style/rules/js/no-extra-parens"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Disallow unnecessary parentheses",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-extra-parens"
      },
      "fixable": "code",
      "name": "no-extra-parens",
      "plugin": "eslint"
    },
    "no-extra-semi": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "no-extra-semi",
              "url": "https://eslint.style/rules/js/no-extra-semi"
            }
          }
        ]
      },
      "type": "suggestion",
      "docs": {
        "description": "Disallow unnecessary semicolons",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-extra-semi"
      },
      "fixable": "code",
      "name": "no-extra-semi",
      "plugin": "eslint"
    },
    "no-fallthrough": {
      "type": "problem",
      "defaultOptions": [
        {
          "allowEmptyCase": false,
          "reportUnusedFallthroughComment": false
        }
      ],
      "docs": {
        "description": "Disallow fallthrough of `case` statements",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-fallthrough"
      },
      "name": "no-fallthrough",
      "plugin": "eslint"
    },
    "no-floating-decimal": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "no-floating-decimal",
              "url": "https://eslint.style/rules/js/no-floating-decimal"
            }
          }
        ]
      },
      "type": "suggestion",
      "docs": {
        "description": "Disallow leading or trailing decimal points in numeric literals",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-floating-decimal"
      },
      "fixable": "code",
      "name": "no-floating-decimal",
      "plugin": "eslint"
    },
    "no-func-assign": {
      "type": "problem",
      "docs": {
        "description": "Disallow reassigning `function` declarations",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-func-assign"
      },
      "name": "no-func-assign",
      "plugin": "eslint"
    },
    "no-global-assign": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "exceptions": []
        }
      ],
      "docs": {
        "description": "Disallow assignments to native objects or read-only global variables",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-global-assign"
      },
      "name": "no-global-assign",
      "plugin": "eslint"
    },
    "no-implicit-coercion": {
      "hasSuggestions": true,
      "type": "suggestion",
      "docs": {
        "description": "Disallow shorthand type conversions",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-implicit-coercion"
      },
      "fixable": "code",
      "defaultOptions": [
        {
          "allow": [],
          "boolean": true,
          "disallowTemplateShorthand": false,
          "number": true,
          "string": true
        }
      ],
      "name": "no-implicit-coercion",
      "plugin": "eslint"
    },
    "no-implicit-globals": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "lexicalBindings": false
        }
      ],
      "docs": {
        "description": "Disallow declarations in the global scope",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-implicit-globals"
      },
      "name": "no-implicit-globals",
      "plugin": "eslint"
    },
    "no-implied-eval": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow the use of `eval()`-like methods",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-implied-eval"
      },
      "name": "no-implied-eval",
      "plugin": "eslint"
    },
    "no-import-assign": {
      "type": "problem",
      "docs": {
        "description": "Disallow assigning to imported bindings",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-import-assign"
      },
      "name": "no-import-assign",
      "plugin": "eslint"
    },
    "no-inline-comments": {
      "type": "suggestion",
      "defaultOptions": [{}],
      "docs": {
        "description": "Disallow inline comments after code",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-inline-comments"
      },
      "name": "no-inline-comments",
      "plugin": "eslint"
    },
    "no-inner-declarations": {
      "type": "problem",
      "defaultOptions": [
        "functions",
        {
          "blockScopedFunctions": "allow"
        }
      ],
      "docs": {
        "description": "Disallow variable or `function` declarations in nested blocks",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-inner-declarations"
      },
      "name": "no-inner-declarations",
      "plugin": "eslint"
    },
    "no-invalid-regexp": {
      "type": "problem",
      "defaultOptions": [{}],
      "docs": {
        "description": "Disallow invalid regular expression strings in `RegExp` constructors",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-invalid-regexp"
      },
      "name": "no-invalid-regexp",
      "plugin": "eslint"
    },
    "no-invalid-this": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "capIsConstructor": true
        }
      ],
      "docs": {
        "description": "Disallow use of `this` in contexts where the value of `this` is `undefined`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-invalid-this"
      },
      "name": "no-invalid-this",
      "plugin": "eslint"
    },
    "no-irregular-whitespace": {
      "type": "problem",
      "defaultOptions": [
        {
          "skipComments": false,
          "skipJSXText": false,
          "skipRegExps": false,
          "skipStrings": true,
          "skipTemplates": false
        }
      ],
      "docs": {
        "description": "Disallow irregular whitespace",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-irregular-whitespace"
      },
      "name": "no-irregular-whitespace",
      "plugin": "eslint"
    },
    "no-iterator": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow the use of the `__iterator__` property",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-iterator"
      },
      "name": "no-iterator",
      "plugin": "eslint"
    },
    "no-label-var": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow labels that share a name with a variable",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-label-var"
      },
      "name": "no-label-var",
      "plugin": "eslint"
    },
    "no-labels": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "allowLoop": false,
          "allowSwitch": false
        }
      ],
      "docs": {
        "description": "Disallow labeled statements",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-labels"
      },
      "name": "no-labels",
      "plugin": "eslint"
    },
    "no-lone-blocks": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow unnecessary nested blocks",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-lone-blocks"
      },
      "name": "no-lone-blocks",
      "plugin": "eslint"
    },
    "no-lonely-if": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow `if` statements as the only statement in `else` blocks",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-lonely-if"
      },
      "fixable": "code",
      "name": "no-lonely-if",
      "plugin": "eslint"
    },
    "no-loop-func": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow function declarations that contain unsafe references inside loop statements",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-loop-func"
      },
      "name": "no-loop-func",
      "plugin": "eslint"
    },
    "no-loss-of-precision": {
      "type": "problem",
      "dialects": ["typescript", "javascript"],
      "language": "javascript",
      "docs": {
        "description": "Disallow literal numbers that lose precision",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-loss-of-precision"
      },
      "name": "no-loss-of-precision",
      "plugin": "eslint"
    },
    "no-magic-numbers": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow magic numbers",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-magic-numbers"
      },
      "name": "no-magic-numbers",
      "plugin": "eslint"
    },
    "no-misleading-character-class": {
      "type": "problem",
      "docs": {
        "description": "Disallow characters which are made with multiple code points in character class syntax",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-misleading-character-class"
      },
      "hasSuggestions": true,
      "name": "no-misleading-character-class",
      "plugin": "eslint"
    },
    "no-mixed-operators": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "no-mixed-operators",
              "url": "https://eslint.style/rules/js/no-mixed-operators"
            }
          }
        ]
      },
      "type": "suggestion",
      "docs": {
        "description": "Disallow mixed binary operators",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-mixed-operators"
      },
      "name": "no-mixed-operators",
      "plugin": "eslint"
    },
    "no-mixed-requires": {
      "deprecated": {
        "message": "Node.js rules were moved out of ESLint core.",
        "url": "https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules",
        "deprecatedSince": "7.0.0",
        "availableUntil": null,
        "replacedBy": [
          {
            "message": "eslint-plugin-n now maintains deprecated Node.js-related rules.",
            "plugin": {
              "name": "eslint-plugin-n",
              "url": "https://github.com/eslint-community/eslint-plugin-n"
            },
            "rule": {
              "name": "no-mixed-requires",
              "url": "https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-mixed-requires.md"
            }
          }
        ]
      },
      "type": "suggestion",
      "docs": {
        "description": "Disallow `require` calls to be mixed with regular variable declarations",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-mixed-requires"
      },
      "name": "no-mixed-requires",
      "plugin": "eslint"
    },
    "no-mixed-spaces-and-tabs": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "no-mixed-spaces-and-tabs",
              "url": "https://eslint.style/rules/js/no-mixed-spaces-and-tabs"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Disallow mixed spaces and tabs for indentation",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-mixed-spaces-and-tabs"
      },
      "name": "no-mixed-spaces-and-tabs",
      "plugin": "eslint"
    },
    "no-multi-assign": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "ignoreNonDeclaration": false
        }
      ],
      "docs": {
        "description": "Disallow use of chained assignment expressions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-multi-assign"
      },
      "name": "no-multi-assign",
      "plugin": "eslint"
    },
    "no-multi-spaces": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "no-multi-spaces",
              "url": "https://eslint.style/rules/js/no-multi-spaces"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Disallow multiple spaces",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-multi-spaces"
      },
      "fixable": "whitespace",
      "name": "no-multi-spaces",
      "plugin": "eslint"
    },
    "no-multi-str": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow multiline strings",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-multi-str"
      },
      "name": "no-multi-str",
      "plugin": "eslint"
    },
    "no-multiple-empty-lines": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "no-multiple-empty-lines",
              "url": "https://eslint.style/rules/js/no-multiple-empty-lines"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Disallow multiple empty lines",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-multiple-empty-lines"
      },
      "fixable": "whitespace",
      "name": "no-multiple-empty-lines",
      "plugin": "eslint"
    },
    "no-native-reassign": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow assignments to native objects or read-only global variables",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-native-reassign"
      },
      "deprecated": {
        "message": "Renamed rule.",
        "url": "https://eslint.org/blog/2016/08/eslint-v3.3.0-released/#deprecated-rules",
        "deprecatedSince": "3.3.0",
        "availableUntil": null,
        "replacedBy": [
          {
            "rule": {
              "name": "no-global-assign",
              "url": "https://eslint.org/docs/rules/no-global-assign"
            }
          }
        ]
      },
      "name": "no-native-reassign",
      "plugin": "eslint"
    },
    "no-negated-condition": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow negated conditions",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-negated-condition"
      },
      "name": "no-negated-condition",
      "plugin": "eslint"
    },
    "no-negated-in-lhs": {
      "type": "problem",
      "docs": {
        "description": "Disallow negating the left operand in `in` expressions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-negated-in-lhs"
      },
      "deprecated": {
        "message": "Renamed rule.",
        "url": "https://eslint.org/blog/2016/08/eslint-v3.3.0-released/#deprecated-rules",
        "deprecatedSince": "3.3.0",
        "availableUntil": null,
        "replacedBy": [
          {
            "rule": {
              "name": "no-unsafe-negation",
              "url": "https://eslint.org/docs/rules/no-unsafe-negation"
            }
          }
        ]
      },
      "name": "no-negated-in-lhs",
      "plugin": "eslint"
    },
    "no-nested-ternary": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow nested ternary expressions",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-nested-ternary"
      },
      "name": "no-nested-ternary",
      "plugin": "eslint"
    },
    "no-new": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow `new` operators outside of assignments or comparisons",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-new"
      },
      "name": "no-new",
      "plugin": "eslint"
    },
    "no-new-func": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow `new` operators with the `Function` object",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-new-func"
      },
      "name": "no-new-func",
      "plugin": "eslint"
    },
    "no-new-native-nonconstructor": {
      "type": "problem",
      "docs": {
        "description": "Disallow `new` operators with global non-constructor functions",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
      },
      "name": "no-new-native-nonconstructor",
      "plugin": "eslint"
    },
    "no-new-object": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow `Object` constructors",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-new-object"
      },
      "deprecated": {
        "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
        "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
        "deprecatedSince": "8.50.0",
        "availableUntil": null,
        "replacedBy": [
          {
            "rule": {
              "name": "no-object-constructor",
              "url": "https://eslint.org/docs/rules/no-object-constructor"
            }
          }
        ]
      },
      "name": "no-new-object",
      "plugin": "eslint"
    },
    "no-new-require": {
      "deprecated": {
        "message": "Node.js rules were moved out of ESLint core.",
        "url": "https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules",
        "deprecatedSince": "7.0.0",
        "availableUntil": null,
        "replacedBy": [
          {
            "message": "eslint-plugin-n now maintains deprecated Node.js-related rules.",
            "plugin": {
              "name": "eslint-plugin-n",
              "url": "https://github.com/eslint-community/eslint-plugin-n"
            },
            "rule": {
              "name": "no-new-require",
              "url": "https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-new-require.md"
            }
          }
        ]
      },
      "type": "suggestion",
      "docs": {
        "description": "Disallow `new` operators with calls to `require`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-new-require"
      },
      "name": "no-new-require",
      "plugin": "eslint"
    },
    "no-new-symbol": {
      "type": "problem",
      "docs": {
        "description": "Disallow `new` operators with the `Symbol` object",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-new-symbol"
      },
      "deprecated": {
        "message": "The rule was replaced with a more general rule.",
        "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
        "deprecatedSince": "9.0.0",
        "availableUntil": null,
        "replacedBy": [
          {
            "rule": {
              "name": "no-new-native-nonconstructor",
              "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
            }
          }
        ]
      },
      "name": "no-new-symbol",
      "plugin": "eslint"
    },
    "no-new-wrappers": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow `new` operators with the `String`, `Number`, and `Boolean` objects",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-new-wrappers"
      },
      "name": "no-new-wrappers",
      "plugin": "eslint"
    },
    "no-nonoctal-decimal-escape": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow `\\8` and `\\9` escape sequences in string literals",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-nonoctal-decimal-escape"
      },
      "hasSuggestions": true,
      "name": "no-nonoctal-decimal-escape",
      "plugin": "eslint"
    },
    "no-obj-calls": {
      "type": "problem",
      "docs": {
        "description": "Disallow calling global object properties as functions",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-obj-calls"
      },
      "name": "no-obj-calls",
      "plugin": "eslint"
    },
    "no-object-constructor": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow calls to the `Object` constructor without an argument",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-object-constructor"
      },
      "hasSuggestions": true,
      "name": "no-object-constructor",
      "plugin": "eslint"
    },
    "no-octal": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow octal literals",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-octal"
      },
      "name": "no-octal",
      "plugin": "eslint"
    },
    "no-octal-escape": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow octal escape sequences in string literals",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-octal-escape"
      },
      "name": "no-octal-escape",
      "plugin": "eslint"
    },
    "no-param-reassign": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow reassigning function parameters",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-param-reassign"
      },
      "name": "no-param-reassign",
      "plugin": "eslint"
    },
    "no-path-concat": {
      "deprecated": {
        "message": "Node.js rules were moved out of ESLint core.",
        "url": "https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules",
        "deprecatedSince": "7.0.0",
        "availableUntil": null,
        "replacedBy": [
          {
            "message": "eslint-plugin-n now maintains deprecated Node.js-related rules.",
            "plugin": {
              "name": "eslint-plugin-n",
              "url": "https://github.com/eslint-community/eslint-plugin-n"
            },
            "rule": {
              "name": "no-path-concat",
              "url": "https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-path-concat.md"
            }
          }
        ]
      },
      "type": "suggestion",
      "docs": {
        "description": "Disallow string concatenation with `__dirname` and `__filename`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-path-concat"
      },
      "name": "no-path-concat",
      "plugin": "eslint"
    },
    "no-plusplus": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "allowForLoopAfterthoughts": false
        }
      ],
      "docs": {
        "description": "Disallow the unary operators `++` and `--`",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-plusplus"
      },
      "name": "no-plusplus",
      "plugin": "eslint"
    },
    "no-process-env": {
      "deprecated": {
        "message": "Node.js rules were moved out of ESLint core.",
        "url": "https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules",
        "deprecatedSince": "7.0.0",
        "availableUntil": null,
        "replacedBy": [
          {
            "message": "eslint-plugin-n now maintains deprecated Node.js-related rules.",
            "plugin": {
              "name": "eslint-plugin-n",
              "url": "https://github.com/eslint-community/eslint-plugin-n"
            },
            "rule": {
              "name": "no-process-env",
              "url": "https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"
            }
          }
        ]
      },
      "type": "suggestion",
      "docs": {
        "description": "Disallow the use of `process.env`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-process-env"
      },
      "name": "no-process-env",
      "plugin": "eslint"
    },
    "no-process-exit": {
      "deprecated": {
        "message": "Node.js rules were moved out of ESLint core.",
        "url": "https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules",
        "deprecatedSince": "7.0.0",
        "availableUntil": null,
        "replacedBy": [
          {
            "message": "eslint-plugin-n now maintains deprecated Node.js-related rules.",
            "plugin": {
              "name": "eslint-plugin-n",
              "url": "https://github.com/eslint-community/eslint-plugin-n"
            },
            "rule": {
              "name": "no-process-exit",
              "url": "https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-exit.md"
            }
          }
        ]
      },
      "type": "suggestion",
      "docs": {
        "description": "Disallow the use of `process.exit()`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-process-exit"
      },
      "name": "no-process-exit",
      "plugin": "eslint"
    },
    "no-promise-executor-return": {
      "type": "problem",
      "defaultOptions": [
        {
          "allowVoid": false
        }
      ],
      "docs": {
        "description": "Disallow returning values from Promise executor functions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-promise-executor-return"
      },
      "hasSuggestions": true,
      "name": "no-promise-executor-return",
      "plugin": "eslint"
    },
    "no-proto": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow the use of the `__proto__` property",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-proto"
      },
      "name": "no-proto",
      "plugin": "eslint"
    },
    "no-prototype-builtins": {
      "type": "problem",
      "docs": {
        "description": "Disallow calling some `Object.prototype` methods directly on objects",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-prototype-builtins"
      },
      "hasSuggestions": true,
      "name": "no-prototype-builtins",
      "plugin": "eslint"
    },
    "no-redeclare": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "builtinGlobals": true
        }
      ],
      "docs": {
        "description": "Disallow variable redeclaration",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-redeclare"
      },
      "name": "no-redeclare",
      "plugin": "eslint"
    },
    "no-regex-spaces": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow multiple spaces in regular expressions",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-regex-spaces"
      },
      "fixable": "code",
      "name": "no-regex-spaces",
      "plugin": "eslint"
    },
    "no-restricted-exports": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow specified names in exports",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-restricted-exports"
      },
      "name": "no-restricted-exports",
      "plugin": "eslint"
    },
    "no-restricted-globals": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow specified global variables",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-restricted-globals"
      },
      "name": "no-restricted-globals",
      "plugin": "eslint"
    },
    "no-restricted-imports": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow specified modules when loaded by `import`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-restricted-imports"
      },
      "name": "no-restricted-imports",
      "plugin": "eslint"
    },
    "no-restricted-modules": {
      "deprecated": {
        "message": "Node.js rules were moved out of ESLint core.",
        "url": "https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules",
        "deprecatedSince": "7.0.0",
        "availableUntil": null,
        "replacedBy": [
          {
            "message": "eslint-plugin-n now maintains deprecated Node.js-related rules.",
            "plugin": {
              "name": "eslint-plugin-n",
              "url": "https://github.com/eslint-community/eslint-plugin-n"
            },
            "rule": {
              "name": "no-restricted-require",
              "url": "https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-restricted-require.md"
            }
          }
        ]
      },
      "type": "suggestion",
      "docs": {
        "description": "Disallow specified modules when loaded by `require`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-restricted-modules"
      },
      "name": "no-restricted-modules",
      "plugin": "eslint"
    },
    "no-restricted-properties": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow certain properties on certain objects",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-restricted-properties"
      },
      "name": "no-restricted-properties",
      "plugin": "eslint"
    },
    "no-restricted-syntax": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow specified syntax",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-restricted-syntax"
      },
      "name": "no-restricted-syntax",
      "plugin": "eslint"
    },
    "no-return-assign": {
      "type": "suggestion",
      "defaultOptions": ["except-parens"],
      "docs": {
        "description": "Disallow assignment operators in `return` statements",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-return-assign"
      },
      "name": "no-return-assign",
      "plugin": "eslint"
    },
    "no-return-await": {
      "hasSuggestions": true,
      "type": "suggestion",
      "docs": {
        "description": "Disallow unnecessary `return await`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-return-await"
      },
      "fixable": null,
      "deprecated": {
        "message": "The original assumption of the rule no longer holds true because of engine optimization.",
        "url": "https://eslint.org/docs/latest/rules/no-return-await",
        "deprecatedSince": "8.46.0",
        "availableUntil": null,
        "replacedBy": []
      },
      "name": "no-return-await",
      "plugin": "eslint"
    },
    "no-script-url": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow `javascript:` URLs",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-script-url"
      },
      "name": "no-script-url",
      "plugin": "eslint"
    },
    "no-self-assign": {
      "type": "problem",
      "defaultOptions": [
        {
          "props": true
        }
      ],
      "docs": {
        "description": "Disallow assignments where both sides are exactly the same",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-self-assign"
      },
      "name": "no-self-assign",
      "plugin": "eslint"
    },
    "no-self-compare": {
      "type": "problem",
      "docs": {
        "description": "Disallow comparisons where both sides are exactly the same",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-self-compare"
      },
      "name": "no-self-compare",
      "plugin": "eslint"
    },
    "no-sequences": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow comma operators",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-sequences"
      },
      "defaultOptions": [
        {
          "allowInParentheses": true
        }
      ],
      "name": "no-sequences",
      "plugin": "eslint"
    },
    "no-setter-return": {
      "type": "problem",
      "docs": {
        "description": "Disallow returning values from setters",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-setter-return"
      },
      "name": "no-setter-return",
      "plugin": "eslint"
    },
    "no-shadow": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "allow": [],
          "builtinGlobals": false,
          "hoist": "functions",
          "ignoreOnInitialization": false
        }
      ],
      "docs": {
        "description": "Disallow variable declarations from shadowing variables declared in the outer scope",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-shadow"
      },
      "name": "no-shadow",
      "plugin": "eslint"
    },
    "no-shadow-restricted-names": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow identifiers from shadowing restricted names",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-shadow-restricted-names"
      },
      "name": "no-shadow-restricted-names",
      "plugin": "eslint"
    },
    "no-spaced-func": {
      "type": "layout",
      "docs": {
        "description": "Disallow spacing between function identifiers and their applications (deprecated)",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-spaced-func"
      },
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2016/08/eslint-v3.3.0-released/#deprecated-rules",
        "deprecatedSince": "3.3.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "function-call-spacing",
              "url": "https://eslint.style/rules/js/function-call-spacing"
            }
          }
        ]
      },
      "fixable": "whitespace",
      "name": "no-spaced-func",
      "plugin": "eslint"
    },
    "no-sparse-arrays": {
      "type": "problem",
      "docs": {
        "description": "Disallow sparse arrays",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-sparse-arrays"
      },
      "name": "no-sparse-arrays",
      "plugin": "eslint"
    },
    "no-sync": {
      "deprecated": {
        "message": "Node.js rules were moved out of ESLint core.",
        "url": "https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules",
        "deprecatedSince": "7.0.0",
        "availableUntil": null,
        "replacedBy": [
          {
            "message": "eslint-plugin-n now maintains deprecated Node.js-related rules.",
            "plugin": {
              "name": "eslint-plugin-n",
              "url": "https://github.com/eslint-community/eslint-plugin-n"
            },
            "rule": {
              "name": "no-sync",
              "url": "https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-sync.md"
            }
          }
        ]
      },
      "type": "suggestion",
      "docs": {
        "description": "Disallow synchronous methods",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-sync"
      },
      "name": "no-sync",
      "plugin": "eslint"
    },
    "no-tabs": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "no-tabs",
              "url": "https://eslint.style/rules/js/no-tabs"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Disallow all tabs",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-tabs"
      },
      "name": "no-tabs",
      "plugin": "eslint"
    },
    "no-template-curly-in-string": {
      "type": "problem",
      "docs": {
        "description": "Disallow template literal placeholder syntax in regular strings",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-template-curly-in-string"
      },
      "name": "no-template-curly-in-string",
      "plugin": "eslint"
    },
    "no-ternary": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow ternary operators",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-ternary"
      },
      "name": "no-ternary",
      "plugin": "eslint"
    },
    "no-this-before-super": {
      "type": "problem",
      "docs": {
        "description": "Disallow `this`/`super` before calling `super()` in constructors",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-this-before-super"
      },
      "name": "no-this-before-super",
      "plugin": "eslint"
    },
    "no-throw-literal": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow throwing literals as exceptions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-throw-literal"
      },
      "name": "no-throw-literal",
      "plugin": "eslint"
    },
    "no-trailing-spaces": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "no-trailing-spaces",
              "url": "https://eslint.style/rules/js/no-trailing-spaces"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Disallow trailing whitespace at the end of lines",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-trailing-spaces"
      },
      "fixable": "whitespace",
      "name": "no-trailing-spaces",
      "plugin": "eslint"
    },
    "no-undef": {
      "type": "problem",
      "defaultOptions": [
        {
          "typeof": false
        }
      ],
      "docs": {
        "description": "Disallow the use of undeclared variables unless mentioned in `/*global */` comments",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-undef"
      },
      "name": "no-undef",
      "plugin": "eslint"
    },
    "no-undef-init": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow initializing variables to `undefined`",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-undef-init"
      },
      "fixable": "code",
      "name": "no-undef-init",
      "plugin": "eslint"
    },
    "no-undefined": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow the use of `undefined` as an identifier",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-undefined"
      },
      "name": "no-undefined",
      "plugin": "eslint"
    },
    "no-underscore-dangle": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "allow": [],
          "allowAfterSuper": false,
          "allowAfterThis": false,
          "allowAfterThisConstructor": false,
          "allowFunctionParams": true,
          "allowInArrayDestructuring": true,
          "allowInObjectDestructuring": true,
          "enforceInClassFields": false,
          "enforceInMethodNames": false
        }
      ],
      "docs": {
        "description": "Disallow dangling underscores in identifiers",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-underscore-dangle"
      },
      "name": "no-underscore-dangle",
      "plugin": "eslint"
    },
    "no-unexpected-multiline": {
      "type": "problem",
      "docs": {
        "description": "Disallow confusing multiline expressions",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-unexpected-multiline"
      },
      "name": "no-unexpected-multiline",
      "plugin": "eslint"
    },
    "no-unmodified-loop-condition": {
      "type": "problem",
      "docs": {
        "description": "Disallow unmodified loop conditions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-unmodified-loop-condition"
      },
      "name": "no-unmodified-loop-condition",
      "plugin": "eslint"
    },
    "no-unneeded-ternary": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "defaultAssignment": true
        }
      ],
      "docs": {
        "description": "Disallow ternary operators when simpler alternatives exist",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-unneeded-ternary"
      },
      "fixable": "code",
      "name": "no-unneeded-ternary",
      "plugin": "eslint"
    },
    "no-unreachable": {
      "type": "problem",
      "docs": {
        "description": "Disallow unreachable code after `return`, `throw`, `continue`, and `break` statements",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-unreachable"
      },
      "name": "no-unreachable",
      "plugin": "eslint"
    },
    "no-unreachable-loop": {
      "type": "problem",
      "defaultOptions": [
        {
          "ignore": []
        }
      ],
      "docs": {
        "description": "Disallow loops with a body that allows only one iteration",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-unreachable-loop"
      },
      "name": "no-unreachable-loop",
      "plugin": "eslint"
    },
    "no-unsafe-finally": {
      "type": "problem",
      "docs": {
        "description": "Disallow control flow statements in `finally` blocks",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-unsafe-finally"
      },
      "name": "no-unsafe-finally",
      "plugin": "eslint"
    },
    "no-unsafe-negation": {
      "type": "problem",
      "defaultOptions": [
        {
          "enforceForOrderingRelations": false
        }
      ],
      "docs": {
        "description": "Disallow negating the left operand of relational operators",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-unsafe-negation"
      },
      "hasSuggestions": true,
      "fixable": null,
      "name": "no-unsafe-negation",
      "plugin": "eslint"
    },
    "no-unsafe-optional-chaining": {
      "type": "problem",
      "defaultOptions": [
        {
          "disallowArithmeticOperators": false
        }
      ],
      "docs": {
        "description": "Disallow use of optional chaining in contexts where the `undefined` value is not allowed",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-unsafe-optional-chaining"
      },
      "fixable": null,
      "name": "no-unsafe-optional-chaining",
      "plugin": "eslint"
    },
    "no-unused-expressions": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow unused expressions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-unused-expressions"
      },
      "defaultOptions": [
        {
          "allowShortCircuit": false,
          "allowTernary": false,
          "allowTaggedTemplates": false,
          "enforceForJSX": false
        }
      ],
      "name": "no-unused-expressions",
      "plugin": "eslint"
    },
    "no-unused-labels": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow unused labels",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-unused-labels"
      },
      "fixable": "code",
      "name": "no-unused-labels",
      "plugin": "eslint"
    },
    "no-unused-private-class-members": {
      "type": "problem",
      "docs": {
        "description": "Disallow unused private class members",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-unused-private-class-members"
      },
      "name": "no-unused-private-class-members",
      "plugin": "eslint"
    },
    "no-unused-vars": {
      "type": "problem",
      "docs": {
        "description": "Disallow unused variables",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-unused-vars"
      },
      "hasSuggestions": true,
      "name": "no-unused-vars",
      "plugin": "eslint"
    },
    "no-use-before-define": {
      "type": "problem",
      "docs": {
        "description": "Disallow the use of variables before they are defined",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-use-before-define"
      },
      "defaultOptions": [
        {
          "classes": true,
          "functions": true,
          "variables": true,
          "allowNamedExports": false
        }
      ],
      "name": "no-use-before-define",
      "plugin": "eslint"
    },
    "no-useless-assignment": {
      "type": "problem",
      "docs": {
        "description": "Disallow variable assignments when the value is not used",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-useless-assignment"
      },
      "name": "no-useless-assignment",
      "plugin": "eslint"
    },
    "no-useless-backreference": {
      "type": "problem",
      "docs": {
        "description": "Disallow useless backreferences in regular expressions",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-useless-backreference"
      },
      "name": "no-useless-backreference",
      "plugin": "eslint"
    },
    "no-useless-call": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow unnecessary calls to `.call()` and `.apply()`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-useless-call"
      },
      "name": "no-useless-call",
      "plugin": "eslint"
    },
    "no-useless-catch": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow unnecessary `catch` clauses",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-useless-catch"
      },
      "name": "no-useless-catch",
      "plugin": "eslint"
    },
    "no-useless-computed-key": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "enforceForClassMembers": true
        }
      ],
      "docs": {
        "description": "Disallow unnecessary computed property keys in objects and classes",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-useless-computed-key"
      },
      "fixable": "code",
      "name": "no-useless-computed-key",
      "plugin": "eslint"
    },
    "no-useless-concat": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow unnecessary concatenation of literals or template literals",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-useless-concat"
      },
      "name": "no-useless-concat",
      "plugin": "eslint"
    },
    "no-useless-constructor": {
      "dialects": ["javascript", "typescript"],
      "language": "javascript",
      "type": "suggestion",
      "docs": {
        "description": "Disallow unnecessary constructors",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-useless-constructor"
      },
      "hasSuggestions": true,
      "name": "no-useless-constructor",
      "plugin": "eslint"
    },
    "no-useless-escape": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow unnecessary escape characters",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-useless-escape"
      },
      "hasSuggestions": true,
      "name": "no-useless-escape",
      "plugin": "eslint"
    },
    "no-useless-rename": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "ignoreDestructuring": false,
          "ignoreImport": false,
          "ignoreExport": false
        }
      ],
      "docs": {
        "description": "Disallow renaming import, export, and destructured assignments to the same name",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-useless-rename"
      },
      "fixable": "code",
      "name": "no-useless-rename",
      "plugin": "eslint"
    },
    "no-useless-return": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow redundant return statements",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-useless-return"
      },
      "fixable": "code",
      "name": "no-useless-return",
      "plugin": "eslint"
    },
    "no-var": {
      "type": "suggestion",
      "docs": {
        "description": "Require `let` or `const` instead of `var`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-var"
      },
      "fixable": "code",
      "name": "no-var",
      "plugin": "eslint"
    },
    "no-void": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "allowAsStatement": false
        }
      ],
      "docs": {
        "description": "Disallow `void` operators",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-void"
      },
      "name": "no-void",
      "plugin": "eslint"
    },
    "no-warning-comments": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "location": "start",
          "terms": ["todo", "fixme", "xxx"]
        }
      ],
      "docs": {
        "description": "Disallow specified warning terms in comments",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-warning-comments"
      },
      "name": "no-warning-comments",
      "plugin": "eslint"
    },
    "no-whitespace-before-property": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "no-whitespace-before-property",
              "url": "https://eslint.style/rules/js/no-whitespace-before-property"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Disallow whitespace before properties",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-whitespace-before-property"
      },
      "fixable": "whitespace",
      "name": "no-whitespace-before-property",
      "plugin": "eslint"
    },
    "no-with": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow `with` statements",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-with"
      },
      "name": "no-with",
      "plugin": "eslint"
    },
    "nonblock-statement-body-position": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "nonblock-statement-body-position",
              "url": "https://eslint.style/rules/js/nonblock-statement-body-position"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce the location of single-line statements",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/nonblock-statement-body-position"
      },
      "fixable": "whitespace",
      "name": "nonblock-statement-body-position",
      "plugin": "eslint"
    },
    "object-curly-newline": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "object-curly-newline",
              "url": "https://eslint.style/rules/js/object-curly-newline"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce consistent line breaks after opening and before closing braces",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/object-curly-newline"
      },
      "fixable": "whitespace",
      "name": "object-curly-newline",
      "plugin": "eslint"
    },
    "object-curly-spacing": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "object-curly-spacing",
              "url": "https://eslint.style/rules/js/object-curly-spacing"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing inside braces",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/object-curly-spacing"
      },
      "fixable": "whitespace",
      "name": "object-curly-spacing",
      "plugin": "eslint"
    },
    "object-property-newline": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "object-property-newline",
              "url": "https://eslint.style/rules/js/object-property-newline"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce placing object properties on separate lines",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/object-property-newline"
      },
      "fixable": "whitespace",
      "name": "object-property-newline",
      "plugin": "eslint"
    },
    "object-shorthand": {
      "type": "suggestion",
      "docs": {
        "description": "Require or disallow method and property shorthand syntax for object literals",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/object-shorthand"
      },
      "fixable": "code",
      "name": "object-shorthand",
      "plugin": "eslint"
    },
    "one-var": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce variables to be declared either together or separately in functions",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/one-var"
      },
      "fixable": "code",
      "name": "one-var",
      "plugin": "eslint"
    },
    "one-var-declaration-per-line": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "one-var-declaration-per-line",
              "url": "https://eslint.style/rules/js/one-var-declaration-per-line"
            }
          }
        ]
      },
      "type": "suggestion",
      "docs": {
        "description": "Require or disallow newlines around variable declarations",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/one-var-declaration-per-line"
      },
      "fixable": "whitespace",
      "name": "one-var-declaration-per-line",
      "plugin": "eslint"
    },
    "operator-assignment": {
      "type": "suggestion",
      "defaultOptions": ["always"],
      "docs": {
        "description": "Require or disallow assignment operator shorthand where possible",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/operator-assignment"
      },
      "fixable": "code",
      "name": "operator-assignment",
      "plugin": "eslint"
    },
    "operator-linebreak": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "operator-linebreak",
              "url": "https://eslint.style/rules/js/operator-linebreak"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce consistent linebreak style for operators",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/operator-linebreak"
      },
      "fixable": "code",
      "name": "operator-linebreak",
      "plugin": "eslint"
    },
    "padded-blocks": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "padded-blocks",
              "url": "https://eslint.style/rules/js/padded-blocks"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Require or disallow padding within blocks",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/padded-blocks"
      },
      "fixable": "whitespace",
      "name": "padded-blocks",
      "plugin": "eslint"
    },
    "padding-line-between-statements": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "padding-line-between-statements",
              "url": "https://eslint.style/rules/js/padding-line-between-statements"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Require or disallow padding lines between statements",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/padding-line-between-statements"
      },
      "fixable": "whitespace",
      "name": "padding-line-between-statements",
      "plugin": "eslint"
    },
    "prefer-arrow-callback": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "allowNamedFunctions": false,
          "allowUnboundThis": true
        }
      ],
      "docs": {
        "description": "Require using arrow functions for callbacks",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/prefer-arrow-callback"
      },
      "fixable": "code",
      "name": "prefer-arrow-callback",
      "plugin": "eslint"
    },
    "prefer-const": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "destructuring": "any",
          "ignoreReadBeforeAssign": false
        }
      ],
      "docs": {
        "description": "Require `const` declarations for variables that are never reassigned after declared",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/prefer-const"
      },
      "fixable": "code",
      "name": "prefer-const",
      "plugin": "eslint"
    },
    "prefer-destructuring": {
      "type": "suggestion",
      "docs": {
        "description": "Require destructuring from arrays and/or objects",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/prefer-destructuring"
      },
      "fixable": "code",
      "name": "prefer-destructuring",
      "plugin": "eslint"
    },
    "prefer-exponentiation-operator": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow the use of `Math.pow` in favor of the `**` operator",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/prefer-exponentiation-operator"
      },
      "fixable": "code",
      "name": "prefer-exponentiation-operator",
      "plugin": "eslint"
    },
    "prefer-named-capture-group": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce using named capture group in regular expression",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/prefer-named-capture-group"
      },
      "hasSuggestions": true,
      "name": "prefer-named-capture-group",
      "plugin": "eslint"
    },
    "prefer-numeric-literals": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow `parseInt()` and `Number.parseInt()` in favor of binary, octal, and hexadecimal literals",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/prefer-numeric-literals"
      },
      "fixable": "code",
      "name": "prefer-numeric-literals",
      "plugin": "eslint"
    },
    "prefer-object-has-own": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow use of `Object.prototype.hasOwnProperty.call()` and prefer use of `Object.hasOwn()`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/prefer-object-has-own"
      },
      "fixable": "code",
      "name": "prefer-object-has-own",
      "plugin": "eslint"
    },
    "prefer-object-spread": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow using `Object.assign` with an object literal as the first argument and prefer the use of object spread instead",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/prefer-object-spread"
      },
      "fixable": "code",
      "name": "prefer-object-spread",
      "plugin": "eslint"
    },
    "prefer-promise-reject-errors": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "allowEmptyReject": false
        }
      ],
      "docs": {
        "description": "Require using Error objects as Promise rejection reasons",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/prefer-promise-reject-errors"
      },
      "fixable": null,
      "name": "prefer-promise-reject-errors",
      "plugin": "eslint"
    },
    "prefer-reflect": {
      "type": "suggestion",
      "docs": {
        "description": "Require `Reflect` methods where applicable",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/prefer-reflect"
      },
      "deprecated": {
        "message": "The original intention of this rule was misguided.",
        "url": "https://eslint.org/docs/latest/rules/prefer-reflect",
        "deprecatedSince": "3.9.0",
        "availableUntil": null,
        "replacedBy": []
      },
      "name": "prefer-reflect",
      "plugin": "eslint"
    },
    "prefer-regex-literals": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "disallowRedundantWrapping": false
        }
      ],
      "docs": {
        "description": "Disallow use of the `RegExp` constructor in favor of regular expression literals",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/prefer-regex-literals"
      },
      "hasSuggestions": true,
      "name": "prefer-regex-literals",
      "plugin": "eslint"
    },
    "prefer-rest-params": {
      "type": "suggestion",
      "docs": {
        "description": "Require rest parameters instead of `arguments`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/prefer-rest-params"
      },
      "name": "prefer-rest-params",
      "plugin": "eslint"
    },
    "prefer-spread": {
      "type": "suggestion",
      "docs": {
        "description": "Require spread operators instead of `.apply()`",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/prefer-spread"
      },
      "fixable": null,
      "name": "prefer-spread",
      "plugin": "eslint"
    },
    "prefer-template": {
      "type": "suggestion",
      "docs": {
        "description": "Require template literals instead of string concatenation",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/prefer-template"
      },
      "fixable": "code",
      "name": "prefer-template",
      "plugin": "eslint"
    },
    "quote-props": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "quote-props",
              "url": "https://eslint.style/rules/js/quote-props"
            }
          }
        ]
      },
      "type": "suggestion",
      "docs": {
        "description": "Require quotes around object literal property names",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/quote-props"
      },
      "fixable": "code",
      "name": "quote-props",
      "plugin": "eslint"
    },
    "quotes": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "quotes",
              "url": "https://eslint.style/rules/js/quotes"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce the consistent use of either backticks, double, or single quotes",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/quotes"
      },
      "fixable": "code",
      "name": "quotes",
      "plugin": "eslint"
    },
    "radix": {
      "type": "suggestion",
      "defaultOptions": ["always"],
      "docs": {
        "description": "Enforce the consistent use of the radix argument when using `parseInt()`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/radix"
      },
      "hasSuggestions": true,
      "name": "radix",
      "plugin": "eslint"
    },
    "require-atomic-updates": {
      "type": "problem",
      "defaultOptions": [
        {
          "allowProperties": false
        }
      ],
      "docs": {
        "description": "Disallow assignments that can lead to race conditions due to usage of `await` or `yield`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/require-atomic-updates"
      },
      "fixable": null,
      "name": "require-atomic-updates",
      "plugin": "eslint"
    },
    "require-await": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow async functions which have no `await` expression",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/require-await"
      },
      "hasSuggestions": true,
      "name": "require-await",
      "plugin": "eslint"
    },
    "require-unicode-regexp": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce the use of `u` or `v` flag on regular expressions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/require-unicode-regexp"
      },
      "hasSuggestions": true,
      "name": "require-unicode-regexp",
      "plugin": "eslint"
    },
    "require-yield": {
      "type": "suggestion",
      "docs": {
        "description": "Require generator functions to contain `yield`",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/require-yield"
      },
      "name": "require-yield",
      "plugin": "eslint"
    },
    "rest-spread-spacing": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "rest-spread-spacing",
              "url": "https://eslint.style/rules/js/rest-spread-spacing"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce spacing between rest and spread operators and their expressions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/rest-spread-spacing"
      },
      "fixable": "whitespace",
      "name": "rest-spread-spacing",
      "plugin": "eslint"
    },
    "semi": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "semi",
              "url": "https://eslint.style/rules/js/semi"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Require or disallow semicolons instead of ASI",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/semi"
      },
      "fixable": "code",
      "name": "semi",
      "plugin": "eslint"
    },
    "semi-spacing": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "semi-spacing",
              "url": "https://eslint.style/rules/js/semi-spacing"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing before and after semicolons",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/semi-spacing"
      },
      "fixable": "whitespace",
      "name": "semi-spacing",
      "plugin": "eslint"
    },
    "semi-style": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "semi-style",
              "url": "https://eslint.style/rules/js/semi-style"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce location of semicolons",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/semi-style"
      },
      "fixable": "whitespace",
      "name": "semi-style",
      "plugin": "eslint"
    },
    "sort-imports": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "allowSeparatedGroups": false,
          "ignoreCase": false,
          "ignoreDeclarationSort": false,
          "ignoreMemberSort": false,
          "memberSyntaxSortOrder": ["none", "all", "multiple", "single"]
        }
      ],
      "docs": {
        "description": "Enforce sorted `import` declarations within modules",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/sort-imports"
      },
      "fixable": "code",
      "name": "sort-imports",
      "plugin": "eslint"
    },
    "sort-keys": {
      "type": "suggestion",
      "defaultOptions": [
        "asc",
        {
          "allowLineSeparatedGroups": false,
          "caseSensitive": true,
          "ignoreComputedKeys": false,
          "minKeys": 2,
          "natural": false
        }
      ],
      "docs": {
        "description": "Require object keys to be sorted",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/sort-keys"
      },
      "name": "sort-keys",
      "plugin": "eslint"
    },
    "sort-vars": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "ignoreCase": false
        }
      ],
      "docs": {
        "description": "Require variables within the same declaration block to be sorted",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/sort-vars"
      },
      "fixable": "code",
      "name": "sort-vars",
      "plugin": "eslint"
    },
    "space-before-blocks": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "space-before-blocks",
              "url": "https://eslint.style/rules/js/space-before-blocks"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing before blocks",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/space-before-blocks"
      },
      "fixable": "whitespace",
      "name": "space-before-blocks",
      "plugin": "eslint"
    },
    "space-before-function-paren": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "space-before-function-paren",
              "url": "https://eslint.style/rules/js/space-before-function-paren"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing before `function` definition opening parenthesis",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/space-before-function-paren"
      },
      "fixable": "whitespace",
      "name": "space-before-function-paren",
      "plugin": "eslint"
    },
    "space-in-parens": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "space-in-parens",
              "url": "https://eslint.style/rules/js/space-in-parens"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing inside parentheses",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/space-in-parens"
      },
      "fixable": "whitespace",
      "name": "space-in-parens",
      "plugin": "eslint"
    },
    "space-infix-ops": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "space-infix-ops",
              "url": "https://eslint.style/rules/js/space-infix-ops"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Require spacing around infix operators",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/space-infix-ops"
      },
      "fixable": "whitespace",
      "name": "space-infix-ops",
      "plugin": "eslint"
    },
    "space-unary-ops": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "space-unary-ops",
              "url": "https://eslint.style/rules/js/space-unary-ops"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing before or after unary operators",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/space-unary-ops"
      },
      "fixable": "whitespace",
      "name": "space-unary-ops",
      "plugin": "eslint"
    },
    "spaced-comment": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "spaced-comment",
              "url": "https://eslint.style/rules/js/spaced-comment"
            }
          }
        ]
      },
      "type": "suggestion",
      "docs": {
        "description": "Enforce consistent spacing after the `//` or `/*` in a comment",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/spaced-comment"
      },
      "fixable": "whitespace",
      "name": "spaced-comment",
      "plugin": "eslint"
    },
    "strict": {
      "type": "suggestion",
      "defaultOptions": ["safe"],
      "docs": {
        "description": "Require or disallow strict mode directives",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/strict"
      },
      "fixable": "code",
      "name": "strict",
      "plugin": "eslint"
    },
    "switch-colon-spacing": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "switch-colon-spacing",
              "url": "https://eslint.style/rules/js/switch-colon-spacing"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce spacing around colons of switch statements",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/switch-colon-spacing"
      },
      "fixable": "whitespace",
      "name": "switch-colon-spacing",
      "plugin": "eslint"
    },
    "symbol-description": {
      "type": "suggestion",
      "docs": {
        "description": "Require symbol descriptions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/symbol-description"
      },
      "fixable": null,
      "name": "symbol-description",
      "plugin": "eslint"
    },
    "template-curly-spacing": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "template-curly-spacing",
              "url": "https://eslint.style/rules/js/template-curly-spacing"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Require or disallow spacing around embedded expressions of template strings",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/template-curly-spacing"
      },
      "fixable": "whitespace",
      "name": "template-curly-spacing",
      "plugin": "eslint"
    },
    "template-tag-spacing": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "template-tag-spacing",
              "url": "https://eslint.style/rules/js/template-tag-spacing"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Require or disallow spacing between template tags and their literals",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/template-tag-spacing"
      },
      "fixable": "whitespace",
      "name": "template-tag-spacing",
      "plugin": "eslint"
    },
    "unicode-bom": {
      "type": "layout",
      "defaultOptions": ["never"],
      "docs": {
        "description": "Require or disallow Unicode byte order mark (BOM)",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/unicode-bom"
      },
      "fixable": "whitespace",
      "name": "unicode-bom",
      "plugin": "eslint"
    },
    "use-isnan": {
      "hasSuggestions": true,
      "type": "problem",
      "docs": {
        "description": "Require calls to `isNaN()` when checking for `NaN`",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/use-isnan"
      },
      "defaultOptions": [
        {
          "enforceForIndexOf": false,
          "enforceForSwitchCase": true
        }
      ],
      "name": "use-isnan",
      "plugin": "eslint"
    },
    "valid-typeof": {
      "type": "problem",
      "defaultOptions": [
        {
          "requireStringLiterals": false
        }
      ],
      "docs": {
        "description": "Enforce comparing `typeof` expressions against valid strings",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/valid-typeof"
      },
      "hasSuggestions": true,
      "name": "valid-typeof",
      "plugin": "eslint"
    },
    "vars-on-top": {
      "type": "suggestion",
      "docs": {
        "description": "Require `var` declarations be placed at the top of their containing scope",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/vars-on-top"
      },
      "name": "vars-on-top",
      "plugin": "eslint"
    },
    "wrap-iife": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "wrap-iife",
              "url": "https://eslint.style/rules/js/wrap-iife"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Require parentheses around immediate `function` invocations",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/wrap-iife"
      },
      "fixable": "code",
      "name": "wrap-iife",
      "plugin": "eslint"
    },
    "wrap-regex": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "wrap-regex",
              "url": "https://eslint.style/rules/js/wrap-regex"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Require parenthesis around regex literals",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/wrap-regex"
      },
      "fixable": "code",
      "name": "wrap-regex",
      "plugin": "eslint"
    },
    "yield-star-spacing": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "yield-star-spacing",
              "url": "https://eslint.style/rules/js/yield-star-spacing"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Require or disallow spacing around the `*` in `yield*` expressions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/yield-star-spacing"
      },
      "fixable": "whitespace",
      "name": "yield-star-spacing",
      "plugin": "eslint"
    },
    "yoda": {
      "type": "suggestion",
      "defaultOptions": [
        "never",
        {
          "exceptRange": false,
          "onlyEquality": false
        }
      ],
      "docs": {
        "description": "Require or disallow \"Yoda\" conditions",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/yoda"
      },
      "fixable": "code",
      "name": "yoda",
      "plugin": "eslint"
    },
    "react/boolean-prop-naming": {
      "docs": {
        "category": "Stylistic Issues",
        "description": "Enforces consistent naming for boolean props",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/boolean-prop-naming.md"
      },
      "name": "react/boolean-prop-naming",
      "plugin": "react"
    },
    "react/button-has-type": {
      "docs": {
        "description": "Disallow usage of `button` elements without an explicit `type` attribute",
        "category": "Possible Errors",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/button-has-type.md"
      },
      "name": "react/button-has-type",
      "plugin": "react"
    },
    "react/checked-requires-onchange-or-readonly": {
      "docs": {
        "description": "Enforce using `onChange` or `readonly` attribute when `checked` is used",
        "category": "Best Practices",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/checked-requires-onchange-or-readonly.md"
      },
      "name": "react/checked-requires-onchange-or-readonly",
      "plugin": "react"
    },
    "react/default-props-match-prop-types": {
      "docs": {
        "description": "Enforce all defaultProps have a corresponding non-required PropType",
        "category": "Best Practices",
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/default-props-match-prop-types.md"
      },
      "name": "react/default-props-match-prop-types",
      "plugin": "react"
    },
    "react/destructuring-assignment": {
      "docs": {
        "description": "Enforce consistent usage of destructuring assignment of props, state, and context",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/destructuring-assignment.md"
      },
      "fixable": "code",
      "name": "react/destructuring-assignment",
      "plugin": "react"
    },
    "react/display-name": {
      "docs": {
        "description": "Disallow missing displayName in a React component definition",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/display-name.md"
      },
      "name": "react/display-name",
      "plugin": "react"
    },
    "react/forbid-component-props": {
      "docs": {
        "description": "Disallow certain props on components",
        "category": "Best Practices",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/forbid-component-props.md"
      },
      "name": "react/forbid-component-props",
      "plugin": "react"
    },
    "react/forbid-dom-props": {
      "docs": {
        "description": "Disallow certain props on DOM Nodes",
        "category": "Best Practices",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/forbid-dom-props.md"
      },
      "name": "react/forbid-dom-props",
      "plugin": "react"
    },
    "react/forbid-elements": {
      "docs": {
        "description": "Disallow certain elements",
        "category": "Best Practices",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/forbid-elements.md"
      },
      "name": "react/forbid-elements",
      "plugin": "react"
    },
    "react/forbid-foreign-prop-types": {
      "docs": {
        "description": "Disallow using another component's propTypes",
        "category": "Best Practices",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/forbid-foreign-prop-types.md"
      },
      "name": "react/forbid-foreign-prop-types",
      "plugin": "react"
    },
    "react/forbid-prop-types": {
      "docs": {
        "description": "Disallow certain propTypes",
        "category": "Best Practices",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/forbid-prop-types.md"
      },
      "name": "react/forbid-prop-types",
      "plugin": "react"
    },
    "react/forward-ref-uses-ref": {
      "docs": {
        "description": "Require all forwardRef components include a ref parameter",
        "category": "Possible Errors",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/forward-ref-uses-ref.md"
      },
      "type": "suggestion",
      "hasSuggestions": true,
      "name": "react/forward-ref-uses-ref",
      "plugin": "react"
    },
    "react/function-component-definition": {
      "docs": {
        "description": "Enforce a specific function type for function components",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/function-component-definition.md"
      },
      "fixable": "code",
      "name": "react/function-component-definition",
      "plugin": "react"
    },
    "react/hook-use-state": {
      "docs": {
        "description": "Ensure destructuring and symmetric naming of useState hook value and setter variables",
        "category": "Best Practices",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/hook-use-state.md"
      },
      "type": "suggestion",
      "hasSuggestions": true,
      "name": "react/hook-use-state",
      "plugin": "react"
    },
    "react/iframe-missing-sandbox": {
      "docs": {
        "description": "Enforce sandbox attribute on iframe elements",
        "category": "Best Practices",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/iframe-missing-sandbox.md"
      },
      "name": "react/iframe-missing-sandbox",
      "plugin": "react"
    },
    "react/jsx-boolean-value": {
      "docs": {
        "description": "Enforce boolean attributes notation in JSX",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-boolean-value.md"
      },
      "fixable": "code",
      "name": "react/jsx-boolean-value",
      "plugin": "react"
    },
    "react/jsx-child-element-spacing": {
      "docs": {
        "description": "Enforce or disallow spaces inside of curly braces in JSX attributes and expressions",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-child-element-spacing.md"
      },
      "fixable": null,
      "name": "react/jsx-child-element-spacing",
      "plugin": "react"
    },
    "react/jsx-closing-bracket-location": {
      "docs": {
        "description": "Enforce closing bracket location in JSX",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-closing-bracket-location.md"
      },
      "fixable": "code",
      "name": "react/jsx-closing-bracket-location",
      "plugin": "react"
    },
    "react/jsx-closing-tag-location": {
      "docs": {
        "description": "Enforce closing tag location for multiline JSX",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-closing-tag-location.md"
      },
      "fixable": "whitespace",
      "name": "react/jsx-closing-tag-location",
      "plugin": "react"
    },
    "react/jsx-curly-spacing": {
      "docs": {
        "description": "Enforce or disallow spaces inside of curly braces in JSX attributes and expressions",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-curly-spacing.md"
      },
      "fixable": "code",
      "name": "react/jsx-curly-spacing",
      "plugin": "react"
    },
    "react/jsx-curly-newline": {
      "type": "layout",
      "docs": {
        "description": "Enforce consistent linebreaks in curly braces in JSX attributes and expressions",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-curly-newline.md"
      },
      "fixable": "whitespace",
      "name": "react/jsx-curly-newline",
      "plugin": "react"
    },
    "react/jsx-equals-spacing": {
      "docs": {
        "description": "Enforce or disallow spaces around equal signs in JSX attributes",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-equals-spacing.md"
      },
      "fixable": "code",
      "name": "react/jsx-equals-spacing",
      "plugin": "react"
    },
    "react/jsx-filename-extension": {
      "docs": {
        "description": "Disallow file extensions that may contain JSX",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-filename-extension.md"
      },
      "name": "react/jsx-filename-extension",
      "plugin": "react"
    },
    "react/jsx-first-prop-new-line": {
      "docs": {
        "description": "Enforce proper position of the first property in JSX",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-first-prop-new-line.md"
      },
      "fixable": "code",
      "name": "react/jsx-first-prop-new-line",
      "plugin": "react"
    },
    "react/jsx-handler-names": {
      "docs": {
        "description": "Enforce event handler naming conventions in JSX",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-handler-names.md"
      },
      "name": "react/jsx-handler-names",
      "plugin": "react"
    },
    "react/jsx-indent": {
      "docs": {
        "description": "Enforce JSX indentation",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-indent.md"
      },
      "fixable": "whitespace",
      "name": "react/jsx-indent",
      "plugin": "react"
    },
    "react/jsx-indent-props": {
      "docs": {
        "description": "Enforce props indentation in JSX",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-indent-props.md"
      },
      "fixable": "code",
      "name": "react/jsx-indent-props",
      "plugin": "react"
    },
    "react/jsx-key": {
      "docs": {
        "description": "Disallow missing `key` props in iterators/collection literals",
        "category": "Possible Errors",
        "recommended": true,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-key.md"
      },
      "name": "react/jsx-key",
      "plugin": "react"
    },
    "react/jsx-max-depth": {
      "docs": {
        "description": "Enforce JSX maximum depth",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-max-depth.md"
      },
      "name": "react/jsx-max-depth",
      "plugin": "react"
    },
    "react/jsx-max-props-per-line": {
      "docs": {
        "description": "Enforce maximum of props on a single line in JSX",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-max-props-per-line.md"
      },
      "fixable": "code",
      "name": "react/jsx-max-props-per-line",
      "plugin": "react"
    },
    "react/jsx-newline": {
      "docs": {
        "description": "Require or prevent a new line after jsx elements and expressions.",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-newline.md"
      },
      "fixable": "code",
      "name": "react/jsx-newline",
      "plugin": "react"
    },
    "react/jsx-no-bind": {
      "docs": {
        "description": "Disallow `.bind()` or arrow functions in JSX props",
        "category": "Best Practices",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-bind.md"
      },
      "name": "react/jsx-no-bind",
      "plugin": "react"
    },
    "react/jsx-no-comment-textnodes": {
      "docs": {
        "description": "Disallow comments from being inserted as text nodes",
        "category": "Possible Errors",
        "recommended": true,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-comment-textnodes.md"
      },
      "name": "react/jsx-no-comment-textnodes",
      "plugin": "react"
    },
    "react/jsx-no-constructed-context-values": {
      "docs": {
        "description": "Disallows JSX context provider values from taking values that will cause needless rerenders",
        "category": "Best Practices",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-constructed-context-values.md"
      },
      "name": "react/jsx-no-constructed-context-values",
      "plugin": "react"
    },
    "react/jsx-no-duplicate-props": {
      "docs": {
        "description": "Disallow duplicate properties in JSX",
        "category": "Possible Errors",
        "recommended": true,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-duplicate-props.md"
      },
      "name": "react/jsx-no-duplicate-props",
      "plugin": "react"
    },
    "react/jsx-no-leaked-render": {
      "docs": {
        "description": "Disallow problematic leaked values from being rendered",
        "category": "Possible Errors",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-leaked-render.md"
      },
      "fixable": "code",
      "name": "react/jsx-no-leaked-render",
      "plugin": "react"
    },
    "react/jsx-no-literals": {
      "docs": {
        "description": "Disallow usage of string literals in JSX",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-literals.md"
      },
      "name": "react/jsx-no-literals",
      "plugin": "react"
    },
    "react/jsx-no-script-url": {
      "docs": {
        "description": "Disallow usage of `javascript:` URLs",
        "category": "Best Practices",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-script-url.md"
      },
      "name": "react/jsx-no-script-url",
      "plugin": "react"
    },
    "react/jsx-no-target-blank": {
      "fixable": "code",
      "docs": {
        "description": "Disallow `target=\"_blank\"` attribute without `rel=\"noreferrer\"`",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-target-blank.md"
      },
      "name": "react/jsx-no-target-blank",
      "plugin": "react"
    },
    "react/jsx-no-useless-fragment": {
      "type": "suggestion",
      "fixable": "code",
      "docs": {
        "description": "Disallow unnecessary fragments",
        "category": "Possible Errors",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-useless-fragment.md"
      },
      "name": "react/jsx-no-useless-fragment",
      "plugin": "react"
    },
    "react/jsx-one-expression-per-line": {
      "docs": {
        "description": "Require one JSX element per line",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-one-expression-per-line.md"
      },
      "fixable": "whitespace",
      "name": "react/jsx-one-expression-per-line",
      "plugin": "react"
    },
    "react/jsx-no-undef": {
      "docs": {
        "description": "Disallow undeclared variables in JSX",
        "category": "Possible Errors",
        "recommended": true,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-undef.md"
      },
      "name": "react/jsx-no-undef",
      "plugin": "react"
    },
    "react/jsx-curly-brace-presence": {
      "docs": {
        "description": "Disallow unnecessary JSX expressions when literals alone are sufficient or enforce JSX expressions on literals in JSX children or attributes",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-curly-brace-presence.md"
      },
      "fixable": "code",
      "name": "react/jsx-curly-brace-presence",
      "plugin": "react"
    },
    "react/jsx-pascal-case": {
      "docs": {
        "description": "Enforce PascalCase for user-defined JSX components",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-pascal-case.md"
      },
      "name": "react/jsx-pascal-case",
      "plugin": "react"
    },
    "react/jsx-fragments": {
      "docs": {
        "description": "Enforce shorthand or standard form for React fragments",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-fragments.md"
      },
      "fixable": "code",
      "name": "react/jsx-fragments",
      "plugin": "react"
    },
    "react/jsx-props-no-multi-spaces": {
      "docs": {
        "description": "Disallow multiple spaces between inline JSX props",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-props-no-multi-spaces.md"
      },
      "fixable": "code",
      "name": "react/jsx-props-no-multi-spaces",
      "plugin": "react"
    },
    "react/jsx-props-no-spreading": {
      "docs": {
        "description": "Disallow JSX prop spreading",
        "category": "Best Practices",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-props-no-spreading.md"
      },
      "name": "react/jsx-props-no-spreading",
      "plugin": "react"
    },
    "react/jsx-props-no-spread-multi": {
      "docs": {
        "description": "Disallow JSX prop spreading the same identifier multiple times",
        "category": "Best Practices",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-props-no-spread-multi.md"
      },
      "name": "react/jsx-props-no-spread-multi",
      "plugin": "react"
    },
    "react/jsx-sort-default-props": {
      "deprecated": true,
      "replacedBy": ["sort-default-props"],
      "docs": {
        "description": "Enforce defaultProps declarations alphabetical sorting",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-sort-default-props.md"
      },
      "name": "react/jsx-sort-default-props",
      "plugin": "react"
    },
    "react/jsx-sort-props": {
      "docs": {
        "description": "Enforce props alphabetical sorting",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-sort-props.md"
      },
      "fixable": "code",
      "name": "react/jsx-sort-props",
      "plugin": "react"
    },
    "react/jsx-space-before-closing": {
      "deprecated": true,
      "replacedBy": ["jsx-tag-spacing"],
      "docs": {
        "description": "Enforce spacing before closing bracket in JSX",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-space-before-closing.md"
      },
      "fixable": "code",
      "name": "react/jsx-space-before-closing",
      "plugin": "react"
    },
    "react/jsx-tag-spacing": {
      "docs": {
        "description": "Enforce whitespace in and around the JSX opening and closing brackets",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-tag-spacing.md"
      },
      "fixable": "whitespace",
      "name": "react/jsx-tag-spacing",
      "plugin": "react"
    },
    "react/jsx-uses-react": {
      "docs": {
        "description": "Disallow React to be incorrectly marked as unused",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-uses-react.md"
      },
      "name": "react/jsx-uses-react",
      "plugin": "react"
    },
    "react/jsx-uses-vars": {
      "docs": {
        "description": "Disallow variables used in JSX to be incorrectly marked as unused",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-uses-vars.md"
      },
      "name": "react/jsx-uses-vars",
      "plugin": "react"
    },
    "react/jsx-wrap-multilines": {
      "docs": {
        "description": "Disallow missing parentheses around multiline JSX",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-wrap-multilines.md"
      },
      "fixable": "code",
      "name": "react/jsx-wrap-multilines",
      "plugin": "react"
    },
    "react/no-invalid-html-attribute": {
      "docs": {
        "description": "Disallow usage of invalid attributes",
        "category": "Possible Errors",
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-invalid-html-attribute.md"
      },
      "type": "suggestion",
      "hasSuggestions": true,
      "name": "react/no-invalid-html-attribute",
      "plugin": "react"
    },
    "react/no-access-state-in-setstate": {
      "docs": {
        "description": "Disallow when this.state is accessed within setState",
        "category": "Possible Errors",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-access-state-in-setstate.md"
      },
      "name": "react/no-access-state-in-setstate",
      "plugin": "react"
    },
    "react/no-adjacent-inline-elements": {
      "docs": {
        "description": "Disallow adjacent inline elements not separated by whitespace.",
        "category": "Best Practices",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-adjacent-inline-elements.md"
      },
      "name": "react/no-adjacent-inline-elements",
      "plugin": "react"
    },
    "react/no-array-index-key": {
      "docs": {
        "description": "Disallow usage of Array index in keys",
        "category": "Best Practices",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-array-index-key.md"
      },
      "name": "react/no-array-index-key",
      "plugin": "react"
    },
    "react/no-arrow-function-lifecycle": {
      "docs": {
        "description": "Lifecycle methods should be methods on the prototype, not class fields",
        "category": "Best Practices",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-arrow-function-lifecycle.md"
      },
      "fixable": "code",
      "name": "react/no-arrow-function-lifecycle",
      "plugin": "react"
    },
    "react/no-children-prop": {
      "docs": {
        "description": "Disallow passing of children as props",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-children-prop.md"
      },
      "name": "react/no-children-prop",
      "plugin": "react"
    },
    "react/no-danger": {
      "docs": {
        "description": "Disallow usage of dangerous JSX properties",
        "category": "Best Practices",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-danger.md"
      },
      "name": "react/no-danger",
      "plugin": "react"
    },
    "react/no-danger-with-children": {
      "docs": {
        "description": "Disallow when a DOM element is using both children and dangerouslySetInnerHTML",
        "category": "Possible Errors",
        "recommended": true,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-danger-with-children.md"
      },
      "name": "react/no-danger-with-children",
      "plugin": "react"
    },
    "react/no-deprecated": {
      "docs": {
        "description": "Disallow usage of deprecated methods",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-deprecated.md"
      },
      "name": "react/no-deprecated",
      "plugin": "react"
    },
    "react/no-did-mount-set-state": {
      "docs": {
        "description": "Disallow usage of setState in componentDidMount",
        "category": "Best Practices",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-did-mount-set-state.md"
      },
      "name": "react/no-did-mount-set-state",
      "plugin": "react"
    },
    "react/no-did-update-set-state": {
      "docs": {
        "description": "Disallow usage of setState in componentDidUpdate",
        "category": "Best Practices",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-did-update-set-state.md"
      },
      "name": "react/no-did-update-set-state",
      "plugin": "react"
    },
    "react/no-direct-mutation-state": {
      "docs": {
        "description": "Disallow direct mutation of this.state",
        "category": "Possible Errors",
        "recommended": true,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-direct-mutation-state.md"
      },
      "name": "react/no-direct-mutation-state",
      "plugin": "react"
    },
    "react/no-find-dom-node": {
      "docs": {
        "description": "Disallow usage of findDOMNode",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-find-dom-node.md"
      },
      "name": "react/no-find-dom-node",
      "plugin": "react"
    },
    "react/no-is-mounted": {
      "docs": {
        "description": "Disallow usage of isMounted",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-is-mounted.md"
      },
      "name": "react/no-is-mounted",
      "plugin": "react"
    },
    "react/no-multi-comp": {
      "docs": {
        "description": "Disallow multiple component definition per file",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-multi-comp.md"
      },
      "name": "react/no-multi-comp",
      "plugin": "react"
    },
    "react/no-namespace": {
      "docs": {
        "description": "Enforce that namespaces are not used in React elements",
        "category": "Possible Errors",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-namespace.md"
      },
      "name": "react/no-namespace",
      "plugin": "react"
    },
    "react/no-set-state": {
      "docs": {
        "description": "Disallow usage of setState",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-set-state.md"
      },
      "name": "react/no-set-state",
      "plugin": "react"
    },
    "react/no-string-refs": {
      "docs": {
        "description": "Disallow using string references",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-string-refs.md"
      },
      "name": "react/no-string-refs",
      "plugin": "react"
    },
    "react/no-redundant-should-component-update": {
      "docs": {
        "description": "Disallow usage of shouldComponentUpdate when extending React.PureComponent",
        "category": "Possible Errors",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-redundant-should-component-update.md"
      },
      "name": "react/no-redundant-should-component-update",
      "plugin": "react"
    },
    "react/no-render-return-value": {
      "docs": {
        "description": "Disallow usage of the return value of ReactDOM.render",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-render-return-value.md"
      },
      "name": "react/no-render-return-value",
      "plugin": "react"
    },
    "react/no-this-in-sfc": {
      "docs": {
        "description": "Disallow `this` from being used in stateless functional components",
        "category": "Possible Errors",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-this-in-sfc.md"
      },
      "name": "react/no-this-in-sfc",
      "plugin": "react"
    },
    "react/no-typos": {
      "docs": {
        "description": "Disallow common typos",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-typos.md"
      },
      "name": "react/no-typos",
      "plugin": "react"
    },
    "react/no-unescaped-entities": {
      "hasSuggestions": true,
      "docs": {
        "description": "Disallow unescaped HTML entities from appearing in markup",
        "category": "Possible Errors",
        "recommended": true,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unescaped-entities.md"
      },
      "name": "react/no-unescaped-entities",
      "plugin": "react"
    },
    "react/no-unknown-property": {
      "docs": {
        "description": "Disallow usage of unknown DOM property",
        "category": "Possible Errors",
        "recommended": true,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unknown-property.md"
      },
      "fixable": "code",
      "name": "react/no-unknown-property",
      "plugin": "react"
    },
    "react/no-unsafe": {
      "docs": {
        "description": "Disallow usage of unsafe lifecycle methods",
        "category": "Best Practices",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unsafe.md"
      },
      "name": "react/no-unsafe",
      "plugin": "react"
    },
    "react/no-unstable-nested-components": {
      "docs": {
        "description": "Disallow creating unstable components inside components",
        "category": "Possible Errors",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unstable-nested-components.md"
      },
      "name": "react/no-unstable-nested-components",
      "plugin": "react"
    },
    "react/no-unused-class-component-methods": {
      "docs": {
        "description": "Disallow declaring unused methods of component class",
        "category": "Best Practices",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unused-class-component-methods.md"
      },
      "name": "react/no-unused-class-component-methods",
      "plugin": "react"
    },
    "react/no-unused-prop-types": {
      "docs": {
        "description": "Disallow definitions of unused propTypes",
        "category": "Best Practices",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unused-prop-types.md"
      },
      "name": "react/no-unused-prop-types",
      "plugin": "react"
    },
    "react/no-unused-state": {
      "docs": {
        "description": "Disallow definitions of unused state",
        "category": "Best Practices",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unused-state.md"
      },
      "name": "react/no-unused-state",
      "plugin": "react"
    },
    "react/no-object-type-as-default-prop": {
      "docs": {
        "description": "Disallow usage of referential-type variables as default param in functional component",
        "category": "Best Practices",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-object-type-as-default-prop.md"
      },
      "name": "react/no-object-type-as-default-prop",
      "plugin": "react"
    },
    "react/no-will-update-set-state": {
      "docs": {
        "description": "Disallow usage of setState in componentWillUpdate",
        "category": "Best Practices",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-will-update-set-state.md"
      },
      "name": "react/no-will-update-set-state",
      "plugin": "react"
    },
    "react/prefer-es6-class": {
      "docs": {
        "description": "Enforce ES5 or ES6 class for React Components",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/prefer-es6-class.md"
      },
      "name": "react/prefer-es6-class",
      "plugin": "react"
    },
    "react/prefer-exact-props": {
      "docs": {
        "description": "Prefer exact proptype definitions",
        "category": "Possible Errors",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/prefer-exact-props.md"
      },
      "name": "react/prefer-exact-props",
      "plugin": "react"
    },
    "react/prefer-read-only-props": {
      "docs": {
        "description": "Enforce that props are read-only",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/prefer-read-only-props.md"
      },
      "fixable": "code",
      "name": "react/prefer-read-only-props",
      "plugin": "react"
    },
    "react/prefer-stateless-function": {
      "docs": {
        "description": "Enforce stateless components to be written as a pure function",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/prefer-stateless-function.md"
      },
      "name": "react/prefer-stateless-function",
      "plugin": "react"
    },
    "react/prop-types": {
      "docs": {
        "description": "Disallow missing props validation in a React component definition",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/prop-types.md"
      },
      "name": "react/prop-types",
      "plugin": "react"
    },
    "react/react-in-jsx-scope": {
      "docs": {
        "description": "Disallow missing React when using JSX",
        "category": "Possible Errors",
        "recommended": true,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/react-in-jsx-scope.md"
      },
      "name": "react/react-in-jsx-scope",
      "plugin": "react"
    },
    "react/require-default-props": {
      "docs": {
        "description": "Enforce a defaultProps definition for every prop that is not a required prop",
        "category": "Best Practices",
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/require-default-props.md"
      },
      "name": "react/require-default-props",
      "plugin": "react"
    },
    "react/require-optimization": {
      "docs": {
        "description": "Enforce React components to have a shouldComponentUpdate method",
        "category": "Best Practices",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/require-optimization.md"
      },
      "name": "react/require-optimization",
      "plugin": "react"
    },
    "react/require-render-return": {
      "docs": {
        "description": "Enforce ES5 or ES6 class for returning value in render function",
        "category": "Possible Errors",
        "recommended": true,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/require-render-return.md"
      },
      "name": "react/require-render-return",
      "plugin": "react"
    },
    "react/self-closing-comp": {
      "docs": {
        "description": "Disallow extra closing tags for components without children",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/self-closing-comp.md"
      },
      "fixable": "code",
      "name": "react/self-closing-comp",
      "plugin": "react"
    },
    "react/sort-comp": {
      "docs": {
        "description": "Enforce component methods order",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/sort-comp.md"
      },
      "name": "react/sort-comp",
      "plugin": "react"
    },
    "react/sort-default-props": {
      "docs": {
        "description": "Enforce defaultProps declarations alphabetical sorting",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/sort-default-props.md"
      },
      "name": "react/sort-default-props",
      "plugin": "react"
    },
    "react/sort-prop-types": {
      "docs": {
        "description": "Enforce propTypes declarations alphabetical sorting",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/sort-prop-types.md"
      },
      "fixable": "code",
      "name": "react/sort-prop-types",
      "plugin": "react"
    },
    "react/state-in-constructor": {
      "docs": {
        "description": "Enforce class component state initialization style",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/state-in-constructor.md"
      },
      "name": "react/state-in-constructor",
      "plugin": "react"
    },
    "react/static-property-placement": {
      "docs": {
        "description": "Enforces where React component static properties should be positioned.",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/static-property-placement.md"
      },
      "fixable": null,
      "name": "react/static-property-placement",
      "plugin": "react"
    },
    "react/style-prop-object": {
      "docs": {
        "description": "Enforce style prop value is an object",
        "category": "Possible Errors",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/style-prop-object.md"
      },
      "name": "react/style-prop-object",
      "plugin": "react"
    },
    "react/void-dom-elements-no-children": {
      "docs": {
        "description": "Disallow void DOM elements (e.g. `<img />`, `<br />`) from receiving children",
        "category": "Best Practices",
        "recommended": false,
        "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/void-dom-elements-no-children.md"
      },
      "name": "react/void-dom-elements-no-children",
      "plugin": "react"
    },
    "@typescript-eslint/adjacent-overload-signatures": {
      "type": "suggestion",
      "docs": {
        "description": "Require that function overload signatures be consecutive",
        "recommended": "stylistic",
        "url": "https://typescript-eslint.io/rules/adjacent-overload-signatures"
      },
      "name": "@typescript-eslint/adjacent-overload-signatures",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/array-type": {
      "type": "suggestion",
      "docs": {
        "description": "Require consistently using either `T[]` or `Array<T>` for arrays",
        "recommended": "stylistic",
        "url": "https://typescript-eslint.io/rules/array-type"
      },
      "fixable": "code",
      "name": "@typescript-eslint/array-type",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/await-thenable": {
      "type": "problem",
      "docs": {
        "description": "Disallow awaiting a value that is not a Thenable",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/await-thenable"
      },
      "hasSuggestions": true,
      "name": "@typescript-eslint/await-thenable",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/ban-ts-comment": {
      "type": "problem",
      "docs": {
        "description": "Disallow `@ts-<directive>` comments or require descriptions after directives",
        "recommended": {
          "recommended": true,
          "strict": [
            {
              "minimumDescriptionLength": 10
            }
          ]
        },
        "url": "https://typescript-eslint.io/rules/ban-ts-comment"
      },
      "hasSuggestions": true,
      "name": "@typescript-eslint/ban-ts-comment",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/ban-tslint-comment": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow `// tslint:<rule-flag>` comments",
        "recommended": "stylistic",
        "url": "https://typescript-eslint.io/rules/ban-tslint-comment"
      },
      "fixable": "code",
      "name": "@typescript-eslint/ban-tslint-comment",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/class-literal-property-style": {
      "type": "problem",
      "docs": {
        "description": "Enforce that literals on classes are exposed in a consistent style",
        "recommended": "stylistic",
        "url": "https://typescript-eslint.io/rules/class-literal-property-style"
      },
      "hasSuggestions": true,
      "name": "@typescript-eslint/class-literal-property-style",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/class-methods-use-this": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce that class methods utilize `this`",
        "extendsBaseRule": true,
        "requiresTypeChecking": false,
        "url": "https://typescript-eslint.io/rules/class-methods-use-this"
      },
      "name": "@typescript-eslint/class-methods-use-this",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/consistent-generic-constructors": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce specifying generic type arguments on type annotation or constructor name of a constructor call",
        "recommended": "stylistic",
        "url": "https://typescript-eslint.io/rules/consistent-generic-constructors"
      },
      "fixable": "code",
      "name": "@typescript-eslint/consistent-generic-constructors",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/consistent-indexed-object-style": {
      "type": "suggestion",
      "docs": {
        "description": "Require or disallow the `Record` type",
        "recommended": "stylistic",
        "url": "https://typescript-eslint.io/rules/consistent-indexed-object-style"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "@typescript-eslint/consistent-indexed-object-style",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/consistent-return": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "treatUndefinedAsUnspecified": false
        }
      ],
      "docs": {
        "description": "Require `return` statements to either always or never specify values",
        "extendsBaseRule": true,
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/consistent-return"
      },
      "name": "@typescript-eslint/consistent-return",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/consistent-type-assertions": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce consistent usage of type assertions",
        "recommended": "stylistic",
        "url": "https://typescript-eslint.io/rules/consistent-type-assertions"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "@typescript-eslint/consistent-type-assertions",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/consistent-type-definitions": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce type definitions to consistently use either `interface` or `type`",
        "recommended": "stylistic",
        "url": "https://typescript-eslint.io/rules/consistent-type-definitions"
      },
      "fixable": "code",
      "name": "@typescript-eslint/consistent-type-definitions",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/consistent-type-exports": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce consistent usage of type exports",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/consistent-type-exports"
      },
      "fixable": "code",
      "name": "@typescript-eslint/consistent-type-exports",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/consistent-type-imports": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce consistent usage of type imports",
        "url": "https://typescript-eslint.io/rules/consistent-type-imports"
      },
      "fixable": "code",
      "name": "@typescript-eslint/consistent-type-imports",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/default-param-last": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce default parameters to be last",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/default-param-last"
      },
      "name": "@typescript-eslint/default-param-last",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/dot-notation": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "allowIndexSignaturePropertyAccess": false,
          "allowKeywords": true,
          "allowPattern": "",
          "allowPrivateClassPropertyAccess": false,
          "allowProtectedClassPropertyAccess": false
        }
      ],
      "docs": {
        "description": "Enforce dot notation whenever possible",
        "extendsBaseRule": true,
        "recommended": "stylistic",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/dot-notation"
      },
      "fixable": "code",
      "name": "@typescript-eslint/dot-notation",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/explicit-function-return-type": {
      "type": "problem",
      "docs": {
        "description": "Require explicit return types on functions and class methods",
        "url": "https://typescript-eslint.io/rules/explicit-function-return-type"
      },
      "name": "@typescript-eslint/explicit-function-return-type",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/explicit-member-accessibility": {
      "type": "problem",
      "docs": {
        "description": "Require explicit accessibility modifiers on class properties and methods",
        "url": "https://typescript-eslint.io/rules/explicit-member-accessibility"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "@typescript-eslint/explicit-member-accessibility",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/explicit-module-boundary-types": {
      "type": "problem",
      "docs": {
        "description": "Require explicit return and argument types on exported functions' and classes' public class methods",
        "url": "https://typescript-eslint.io/rules/explicit-module-boundary-types"
      },
      "name": "@typescript-eslint/explicit-module-boundary-types",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/init-declarations": {
      "type": "suggestion",
      "docs": {
        "description": "Require or disallow initialization in variable declarations",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/init-declarations"
      },
      "name": "@typescript-eslint/init-declarations",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/max-params": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce a maximum number of parameters in function definitions",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/max-params"
      },
      "name": "@typescript-eslint/max-params",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/member-ordering": {
      "type": "suggestion",
      "docs": {
        "description": "Require a consistent member declaration order",
        "url": "https://typescript-eslint.io/rules/member-ordering"
      },
      "name": "@typescript-eslint/member-ordering",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/method-signature-style": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce using a particular method signature syntax",
        "url": "https://typescript-eslint.io/rules/method-signature-style"
      },
      "fixable": "code",
      "name": "@typescript-eslint/method-signature-style",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/naming-convention": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce naming conventions for everything across a codebase",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/naming-convention"
      },
      "name": "@typescript-eslint/naming-convention",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-array-constructor": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow generic `Array` constructors",
        "extendsBaseRule": true,
        "recommended": "recommended",
        "url": "https://typescript-eslint.io/rules/no-array-constructor"
      },
      "fixable": "code",
      "name": "@typescript-eslint/no-array-constructor",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-array-delete": {
      "type": "problem",
      "docs": {
        "description": "Disallow using the `delete` operator on array values",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-array-delete"
      },
      "hasSuggestions": true,
      "name": "@typescript-eslint/no-array-delete",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-base-to-string": {
      "type": "suggestion",
      "docs": {
        "description": "Require `.toString()` and `.toLocaleString()` to only be called on objects which provide useful information when stringified",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-base-to-string"
      },
      "name": "@typescript-eslint/no-base-to-string",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-confusing-non-null-assertion": {
      "type": "problem",
      "docs": {
        "description": "Disallow non-null assertion in locations that may be confusing",
        "recommended": "stylistic",
        "url": "https://typescript-eslint.io/rules/no-confusing-non-null-assertion"
      },
      "hasSuggestions": true,
      "name": "@typescript-eslint/no-confusing-non-null-assertion",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-confusing-void-expression": {
      "type": "problem",
      "docs": {
        "description": "Require expressions of type void to appear in statement position",
        "recommended": "strict",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-confusing-void-expression"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "@typescript-eslint/no-confusing-void-expression",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-deprecated": {
      "type": "problem",
      "docs": {
        "description": "Disallow using code marked as `@deprecated`",
        "recommended": "strict",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-deprecated"
      },
      "name": "@typescript-eslint/no-deprecated",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-dupe-class-members": {
      "type": "problem",
      "docs": {
        "description": "Disallow duplicate class members",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/no-dupe-class-members"
      },
      "name": "@typescript-eslint/no-dupe-class-members",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-duplicate-enum-values": {
      "type": "problem",
      "docs": {
        "description": "Disallow duplicate enum member values",
        "recommended": "recommended",
        "url": "https://typescript-eslint.io/rules/no-duplicate-enum-values"
      },
      "hasSuggestions": false,
      "name": "@typescript-eslint/no-duplicate-enum-values",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-duplicate-type-constituents": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow duplicate constituents of union or intersection types",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-duplicate-type-constituents"
      },
      "fixable": "code",
      "name": "@typescript-eslint/no-duplicate-type-constituents",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-dynamic-delete": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow using the `delete` operator on computed key expressions",
        "recommended": "strict",
        "url": "https://typescript-eslint.io/rules/no-dynamic-delete"
      },
      "fixable": "code",
      "name": "@typescript-eslint/no-dynamic-delete",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-empty-function": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "allow": []
        }
      ],
      "docs": {
        "description": "Disallow empty functions",
        "extendsBaseRule": true,
        "recommended": "stylistic",
        "url": "https://typescript-eslint.io/rules/no-empty-function"
      },
      "name": "@typescript-eslint/no-empty-function",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-empty-interface": {
      "type": "suggestion",
      "deprecated": {
        "deprecatedSince": "8.0.0",
        "replacedBy": [
          {
            "rule": {
              "name": "@typescript-eslint/no-empty-object-type",
              "url": "https://typescript-eslint.io/rules/no-empty-object-type"
            }
          }
        ],
        "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8977"
      },
      "docs": {
        "description": "Disallow the declaration of empty interfaces",
        "url": "https://typescript-eslint.io/rules/no-empty-interface"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "replacedBy": ["@typescript-eslint/no-empty-object-type"],
      "name": "@typescript-eslint/no-empty-interface",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-empty-object-type": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow accidentally using the \"empty object\" type",
        "recommended": "recommended",
        "url": "https://typescript-eslint.io/rules/no-empty-object-type"
      },
      "hasSuggestions": true,
      "name": "@typescript-eslint/no-empty-object-type",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-explicit-any": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow the `any` type",
        "recommended": "recommended",
        "url": "https://typescript-eslint.io/rules/no-explicit-any"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "@typescript-eslint/no-explicit-any",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-extra-non-null-assertion": {
      "type": "problem",
      "docs": {
        "description": "Disallow extra non-null assertions",
        "recommended": "recommended",
        "url": "https://typescript-eslint.io/rules/no-extra-non-null-assertion"
      },
      "fixable": "code",
      "name": "@typescript-eslint/no-extra-non-null-assertion",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-extraneous-class": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow classes used as namespaces",
        "recommended": "strict",
        "url": "https://typescript-eslint.io/rules/no-extraneous-class"
      },
      "name": "@typescript-eslint/no-extraneous-class",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-floating-promises": {
      "type": "problem",
      "docs": {
        "description": "Require Promise-like statements to be handled appropriately",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-floating-promises"
      },
      "hasSuggestions": true,
      "name": "@typescript-eslint/no-floating-promises",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-for-in-array": {
      "type": "problem",
      "docs": {
        "description": "Disallow iterating over an array with a for-in loop",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-for-in-array"
      },
      "name": "@typescript-eslint/no-for-in-array",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-implied-eval": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow the use of `eval()`-like functions",
        "extendsBaseRule": true,
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-implied-eval"
      },
      "name": "@typescript-eslint/no-implied-eval",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-import-type-side-effects": {
      "type": "problem",
      "docs": {
        "description": "Enforce the use of top-level import type qualifier when an import only has specifiers with inline type qualifiers",
        "url": "https://typescript-eslint.io/rules/no-import-type-side-effects"
      },
      "fixable": "code",
      "name": "@typescript-eslint/no-import-type-side-effects",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-inferrable-types": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow explicit type declarations for variables or parameters initialized to a number, string, or boolean",
        "recommended": "stylistic",
        "url": "https://typescript-eslint.io/rules/no-inferrable-types"
      },
      "fixable": "code",
      "name": "@typescript-eslint/no-inferrable-types",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-invalid-this": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "capIsConstructor": true
        }
      ],
      "docs": {
        "description": "Disallow `this` keywords outside of classes or class-like objects",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/no-invalid-this"
      },
      "name": "@typescript-eslint/no-invalid-this",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-invalid-void-type": {
      "type": "problem",
      "docs": {
        "description": "Disallow `void` type outside of generic or return types",
        "recommended": "strict",
        "url": "https://typescript-eslint.io/rules/no-invalid-void-type"
      },
      "name": "@typescript-eslint/no-invalid-void-type",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-loop-func": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow function declarations that contain unsafe references inside loop statements",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/no-loop-func"
      },
      "name": "@typescript-eslint/no-loop-func",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-loss-of-precision": {
      "type": "problem",
      "deprecated": {
        "deprecatedSince": "8.0.0",
        "replacedBy": [
          {
            "rule": {
              "name": "no-loss-of-precision",
              "url": "https://eslint.org/docs/latest/rules/no-loss-of-precision"
            }
          }
        ],
        "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8832"
      },
      "docs": {
        "description": "Disallow literal numbers that lose precision",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/no-loss-of-precision"
      },
      "name": "@typescript-eslint/no-loss-of-precision",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-magic-numbers": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow magic numbers",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/no-magic-numbers"
      },
      "name": "@typescript-eslint/no-magic-numbers",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-meaningless-void-operator": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow the `void` operator except when used to discard a value",
        "recommended": "strict",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-meaningless-void-operator"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "@typescript-eslint/no-meaningless-void-operator",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-misused-new": {
      "type": "problem",
      "docs": {
        "description": "Enforce valid definition of `new` and `constructor`",
        "recommended": "recommended",
        "url": "https://typescript-eslint.io/rules/no-misused-new"
      },
      "name": "@typescript-eslint/no-misused-new",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-misused-promises": {
      "type": "problem",
      "docs": {
        "description": "Disallow Promises in places not designed to handle them",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-misused-promises"
      },
      "name": "@typescript-eslint/no-misused-promises",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-misused-spread": {
      "type": "problem",
      "docs": {
        "description": "Disallow using the spread operator when it might cause unexpected behavior",
        "recommended": "strict",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-misused-spread"
      },
      "hasSuggestions": true,
      "name": "@typescript-eslint/no-misused-spread",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-mixed-enums": {
      "type": "problem",
      "docs": {
        "description": "Disallow enums from having both number and string members",
        "recommended": "strict",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-mixed-enums"
      },
      "name": "@typescript-eslint/no-mixed-enums",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-namespace": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow TypeScript namespaces",
        "recommended": "recommended",
        "url": "https://typescript-eslint.io/rules/no-namespace"
      },
      "name": "@typescript-eslint/no-namespace",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-non-null-asserted-nullish-coalescing": {
      "type": "problem",
      "docs": {
        "description": "Disallow non-null assertions in the left operand of a nullish coalescing operator",
        "recommended": "strict",
        "url": "https://typescript-eslint.io/rules/no-non-null-asserted-nullish-coalescing"
      },
      "hasSuggestions": true,
      "name": "@typescript-eslint/no-non-null-asserted-nullish-coalescing",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-non-null-asserted-optional-chain": {
      "type": "problem",
      "docs": {
        "description": "Disallow non-null assertions after an optional chain expression",
        "recommended": "recommended",
        "url": "https://typescript-eslint.io/rules/no-non-null-asserted-optional-chain"
      },
      "hasSuggestions": true,
      "name": "@typescript-eslint/no-non-null-asserted-optional-chain",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-non-null-assertion": {
      "type": "problem",
      "docs": {
        "description": "Disallow non-null assertions using the `!` postfix operator",
        "recommended": "strict",
        "url": "https://typescript-eslint.io/rules/no-non-null-assertion"
      },
      "hasSuggestions": true,
      "name": "@typescript-eslint/no-non-null-assertion",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-redeclare": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow variable redeclaration",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/no-redeclare"
      },
      "name": "@typescript-eslint/no-redeclare",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-redundant-type-constituents": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow members of unions and intersections that do nothing or override type information",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-redundant-type-constituents"
      },
      "name": "@typescript-eslint/no-redundant-type-constituents",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-require-imports": {
      "type": "problem",
      "docs": {
        "description": "Disallow invocation of `require()`",
        "recommended": "recommended",
        "url": "https://typescript-eslint.io/rules/no-require-imports"
      },
      "name": "@typescript-eslint/no-require-imports",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-restricted-imports": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow specified modules when loaded by `import`",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/no-restricted-imports"
      },
      "name": "@typescript-eslint/no-restricted-imports",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-restricted-types": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow certain types",
        "url": "https://typescript-eslint.io/rules/no-restricted-types"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "@typescript-eslint/no-restricted-types",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-shadow": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow variable declarations from shadowing variables declared in the outer scope",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/no-shadow"
      },
      "name": "@typescript-eslint/no-shadow",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-this-alias": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow aliasing `this`",
        "recommended": "recommended",
        "url": "https://typescript-eslint.io/rules/no-this-alias"
      },
      "name": "@typescript-eslint/no-this-alias",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-type-alias": {
      "type": "suggestion",
      "deprecated": {
        "deprecatedSince": "6.0.0",
        "replacedBy": [
          {
            "rule": {
              "name": "@typescript-eslint/consistent-type-definitions",
              "url": "https://typescript-eslint.io/rules/consistent-type-definitions"
            }
          }
        ],
        "url": "https://github.com/typescript-eslint/typescript-eslint/pull/6229"
      },
      "docs": {
        "description": "Disallow type aliases",
        "url": "https://typescript-eslint.io/rules/no-type-alias"
      },
      "name": "@typescript-eslint/no-type-alias",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-unnecessary-boolean-literal-compare": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow unnecessary equality comparisons against boolean literals",
        "recommended": "strict",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unnecessary-boolean-literal-compare"
      },
      "fixable": "code",
      "name": "@typescript-eslint/no-unnecessary-boolean-literal-compare",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-unnecessary-condition": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow conditionals where the type is always truthy or always falsy",
        "recommended": "strict",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unnecessary-condition"
      },
      "fixable": "code",
      "name": "@typescript-eslint/no-unnecessary-condition",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-unnecessary-parameter-property-assignment": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow unnecessary assignment of constructor property parameter",
        "url": "https://typescript-eslint.io/rules/no-unnecessary-parameter-property-assignment"
      },
      "name": "@typescript-eslint/no-unnecessary-parameter-property-assignment",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-unnecessary-qualifier": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow unnecessary namespace qualifiers",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unnecessary-qualifier"
      },
      "fixable": "code",
      "name": "@typescript-eslint/no-unnecessary-qualifier",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-unnecessary-template-expression": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow unnecessary template expressions",
        "recommended": "strict",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unnecessary-template-expression"
      },
      "fixable": "code",
      "name": "@typescript-eslint/no-unnecessary-template-expression",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-unnecessary-type-arguments": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow type arguments that are equal to the default",
        "recommended": "strict",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unnecessary-type-arguments"
      },
      "fixable": "code",
      "name": "@typescript-eslint/no-unnecessary-type-arguments",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-unnecessary-type-assertion": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow type assertions that do not change the type of an expression",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unnecessary-type-assertion"
      },
      "fixable": "code",
      "name": "@typescript-eslint/no-unnecessary-type-assertion",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-unnecessary-type-constraint": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow unnecessary constraints on generic types",
        "recommended": "recommended",
        "url": "https://typescript-eslint.io/rules/no-unnecessary-type-constraint"
      },
      "hasSuggestions": true,
      "name": "@typescript-eslint/no-unnecessary-type-constraint",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-unnecessary-type-parameters": {
      "type": "problem",
      "docs": {
        "description": "Disallow type parameters that aren't used multiple times",
        "recommended": "strict",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unnecessary-type-parameters"
      },
      "hasSuggestions": true,
      "name": "@typescript-eslint/no-unnecessary-type-parameters",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-unsafe-argument": {
      "type": "problem",
      "docs": {
        "description": "Disallow calling a function with a value with type `any`",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unsafe-argument"
      },
      "name": "@typescript-eslint/no-unsafe-argument",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-unsafe-assignment": {
      "type": "problem",
      "docs": {
        "description": "Disallow assigning a value with type `any` to variables and properties",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unsafe-assignment"
      },
      "name": "@typescript-eslint/no-unsafe-assignment",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-unsafe-call": {
      "type": "problem",
      "docs": {
        "description": "Disallow calling a value with type `any`",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unsafe-call"
      },
      "name": "@typescript-eslint/no-unsafe-call",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-unsafe-declaration-merging": {
      "type": "problem",
      "docs": {
        "description": "Disallow unsafe declaration merging",
        "recommended": "recommended",
        "requiresTypeChecking": false,
        "url": "https://typescript-eslint.io/rules/no-unsafe-declaration-merging"
      },
      "name": "@typescript-eslint/no-unsafe-declaration-merging",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-unsafe-enum-comparison": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow comparing an enum value with a non-enum value",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unsafe-enum-comparison"
      },
      "hasSuggestions": true,
      "name": "@typescript-eslint/no-unsafe-enum-comparison",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-unsafe-function-type": {
      "type": "problem",
      "docs": {
        "description": "Disallow using the unsafe built-in Function type",
        "recommended": "recommended",
        "url": "https://typescript-eslint.io/rules/no-unsafe-function-type"
      },
      "name": "@typescript-eslint/no-unsafe-function-type",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-unsafe-member-access": {
      "type": "problem",
      "docs": {
        "description": "Disallow member access on a value with type `any`",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unsafe-member-access"
      },
      "name": "@typescript-eslint/no-unsafe-member-access",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-unsafe-return": {
      "type": "problem",
      "docs": {
        "description": "Disallow returning a value with type `any` from a function",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unsafe-return"
      },
      "name": "@typescript-eslint/no-unsafe-return",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-unsafe-type-assertion": {
      "type": "problem",
      "docs": {
        "description": "Disallow type assertions that narrow a type",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unsafe-type-assertion"
      },
      "name": "@typescript-eslint/no-unsafe-type-assertion",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-unsafe-unary-minus": {
      "type": "problem",
      "docs": {
        "description": "Require unary negation to take a number",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unsafe-unary-minus"
      },
      "name": "@typescript-eslint/no-unsafe-unary-minus",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-unused-expressions": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "allowShortCircuit": false,
          "allowTaggedTemplates": false,
          "allowTernary": false
        }
      ],
      "docs": {
        "description": "Disallow unused expressions",
        "extendsBaseRule": true,
        "recommended": "recommended",
        "url": "https://typescript-eslint.io/rules/no-unused-expressions"
      },
      "name": "@typescript-eslint/no-unused-expressions",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-unused-vars": {
      "type": "problem",
      "docs": {
        "description": "Disallow unused variables",
        "extendsBaseRule": true,
        "recommended": "recommended",
        "url": "https://typescript-eslint.io/rules/no-unused-vars"
      },
      "name": "@typescript-eslint/no-unused-vars",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-use-before-define": {
      "type": "problem",
      "docs": {
        "description": "Disallow the use of variables before they are defined",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/no-use-before-define"
      },
      "name": "@typescript-eslint/no-use-before-define",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-useless-constructor": {
      "type": "problem",
      "docs": {
        "description": "Disallow unnecessary constructors",
        "extendsBaseRule": true,
        "recommended": "strict",
        "url": "https://typescript-eslint.io/rules/no-useless-constructor"
      },
      "hasSuggestions": true,
      "name": "@typescript-eslint/no-useless-constructor",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-useless-empty-export": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow empty exports that don't change anything in a module file",
        "url": "https://typescript-eslint.io/rules/no-useless-empty-export"
      },
      "fixable": "code",
      "hasSuggestions": false,
      "name": "@typescript-eslint/no-useless-empty-export",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-var-requires": {
      "type": "problem",
      "deprecated": {
        "deprecatedSince": "8.0.0",
        "replacedBy": [
          {
            "rule": {
              "name": "@typescript-eslint/no-require-imports",
              "url": "https://typescript-eslint.io/rules/no-require-imports"
            }
          }
        ],
        "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8334"
      },
      "docs": {
        "description": "Disallow `require` statements except in import statements",
        "url": "https://typescript-eslint.io/rules/no-var-requires"
      },
      "replacedBy": ["@typescript-eslint/no-require-imports"],
      "name": "@typescript-eslint/no-var-requires",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-wrapper-object-types": {
      "type": "problem",
      "docs": {
        "description": "Disallow using confusing built-in primitive class wrappers",
        "recommended": "recommended",
        "url": "https://typescript-eslint.io/rules/no-wrapper-object-types"
      },
      "fixable": "code",
      "name": "@typescript-eslint/no-wrapper-object-types",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/non-nullable-type-assertion-style": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce non-null assertions over explicit type assertions",
        "recommended": "stylistic",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/non-nullable-type-assertion-style"
      },
      "fixable": "code",
      "name": "@typescript-eslint/non-nullable-type-assertion-style",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/only-throw-error": {
      "type": "problem",
      "docs": {
        "description": "Disallow throwing non-`Error` values as exceptions",
        "extendsBaseRule": "no-throw-literal",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/only-throw-error"
      },
      "name": "@typescript-eslint/only-throw-error",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/parameter-properties": {
      "type": "problem",
      "docs": {
        "description": "Require or disallow parameter properties in class constructors",
        "url": "https://typescript-eslint.io/rules/parameter-properties"
      },
      "name": "@typescript-eslint/parameter-properties",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/prefer-as-const": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce the use of `as const` over literal type",
        "recommended": "recommended",
        "url": "https://typescript-eslint.io/rules/prefer-as-const"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "@typescript-eslint/prefer-as-const",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/prefer-destructuring": {
      "type": "suggestion",
      "docs": {
        "description": "Require destructuring from arrays and/or objects",
        "extendsBaseRule": true,
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/prefer-destructuring"
      },
      "fixable": "code",
      "name": "@typescript-eslint/prefer-destructuring",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/prefer-enum-initializers": {
      "type": "suggestion",
      "docs": {
        "description": "Require each enum member value to be explicitly initialized",
        "url": "https://typescript-eslint.io/rules/prefer-enum-initializers"
      },
      "hasSuggestions": true,
      "name": "@typescript-eslint/prefer-enum-initializers",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/prefer-find": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce the use of Array.prototype.find() over Array.prototype.filter() followed by [0] when looking for a single result",
        "recommended": "stylistic",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/prefer-find"
      },
      "hasSuggestions": true,
      "name": "@typescript-eslint/prefer-find",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/prefer-for-of": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce the use of `for-of` loop over the standard `for` loop where possible",
        "recommended": "stylistic",
        "url": "https://typescript-eslint.io/rules/prefer-for-of"
      },
      "name": "@typescript-eslint/prefer-for-of",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/prefer-function-type": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce using function types instead of interfaces with call signatures",
        "recommended": "stylistic",
        "url": "https://typescript-eslint.io/rules/prefer-function-type"
      },
      "fixable": "code",
      "name": "@typescript-eslint/prefer-function-type",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/prefer-includes": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce `includes` method over `indexOf` method",
        "recommended": "stylistic",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/prefer-includes"
      },
      "fixable": "code",
      "name": "@typescript-eslint/prefer-includes",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/prefer-literal-enum-member": {
      "type": "suggestion",
      "docs": {
        "description": "Require all enum members to be literal values",
        "recommended": "strict",
        "requiresTypeChecking": false,
        "url": "https://typescript-eslint.io/rules/prefer-literal-enum-member"
      },
      "name": "@typescript-eslint/prefer-literal-enum-member",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/prefer-namespace-keyword": {
      "type": "suggestion",
      "docs": {
        "description": "Require using `namespace` keyword over `module` keyword to declare custom TypeScript modules",
        "recommended": "recommended",
        "url": "https://typescript-eslint.io/rules/prefer-namespace-keyword"
      },
      "fixable": "code",
      "name": "@typescript-eslint/prefer-namespace-keyword",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/prefer-nullish-coalescing": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce using the nullish coalescing operator instead of logical assignments or chaining",
        "recommended": "stylistic",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/prefer-nullish-coalescing"
      },
      "hasSuggestions": true,
      "name": "@typescript-eslint/prefer-nullish-coalescing",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/prefer-optional-chain": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce using concise optional chain expressions instead of chained logical ands, negated logical ors, or empty objects",
        "recommended": "stylistic",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/prefer-optional-chain"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "@typescript-eslint/prefer-optional-chain",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/prefer-promise-reject-errors": {
      "type": "suggestion",
      "docs": {
        "description": "Require using Error objects as Promise rejection reasons",
        "extendsBaseRule": true,
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/prefer-promise-reject-errors"
      },
      "name": "@typescript-eslint/prefer-promise-reject-errors",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/prefer-readonly": {
      "type": "suggestion",
      "docs": {
        "description": "Require private members to be marked as `readonly` if they're never modified outside of the constructor",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/prefer-readonly"
      },
      "fixable": "code",
      "name": "@typescript-eslint/prefer-readonly",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/prefer-readonly-parameter-types": {
      "type": "suggestion",
      "docs": {
        "description": "Require function parameters to be typed as `readonly` to prevent accidental mutation of inputs",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/prefer-readonly-parameter-types"
      },
      "name": "@typescript-eslint/prefer-readonly-parameter-types",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/prefer-reduce-type-parameter": {
      "type": "problem",
      "docs": {
        "description": "Enforce using type parameter when calling `Array#reduce` instead of using a type assertion",
        "recommended": "strict",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/prefer-reduce-type-parameter"
      },
      "fixable": "code",
      "name": "@typescript-eslint/prefer-reduce-type-parameter",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/prefer-regexp-exec": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce `RegExp#exec` over `String#match` if no global flag is provided",
        "recommended": "stylistic",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/prefer-regexp-exec"
      },
      "fixable": "code",
      "name": "@typescript-eslint/prefer-regexp-exec",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/prefer-return-this-type": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce that `this` is used when only `this` type is returned",
        "recommended": "strict",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/prefer-return-this-type"
      },
      "fixable": "code",
      "name": "@typescript-eslint/prefer-return-this-type",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/prefer-string-starts-ends-with": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce using `String#startsWith` and `String#endsWith` over other equivalent methods of checking substrings",
        "recommended": "stylistic",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/prefer-string-starts-ends-with"
      },
      "fixable": "code",
      "name": "@typescript-eslint/prefer-string-starts-ends-with",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/prefer-ts-expect-error": {
      "type": "problem",
      "deprecated": {
        "deprecatedSince": "7.11.0",
        "replacedBy": [
          {
            "rule": {
              "name": "@typescript-eslint/ban-ts-comment",
              "url": "https://typescript-eslint.io/rules/ban-ts-comment"
            }
          }
        ],
        "url": "https://github.com/typescript-eslint/typescript-eslint/pull/9081"
      },
      "docs": {
        "description": "Enforce using `@ts-expect-error` over `@ts-ignore`",
        "url": "https://typescript-eslint.io/rules/prefer-ts-expect-error"
      },
      "fixable": "code",
      "replacedBy": ["@typescript-eslint/ban-ts-comment"],
      "name": "@typescript-eslint/prefer-ts-expect-error",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/promise-function-async": {
      "type": "suggestion",
      "docs": {
        "description": "Require any function or method that returns a Promise to be marked async",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/promise-function-async"
      },
      "fixable": "code",
      "name": "@typescript-eslint/promise-function-async",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/related-getter-setter-pairs": {
      "type": "problem",
      "docs": {
        "description": "Enforce that `get()` types should be assignable to their equivalent `set()` type",
        "recommended": "strict",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/related-getter-setter-pairs"
      },
      "name": "@typescript-eslint/related-getter-setter-pairs",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/require-array-sort-compare": {
      "type": "problem",
      "docs": {
        "description": "Require `Array#sort` and `Array#toSorted` calls to always provide a `compareFunction`",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/require-array-sort-compare"
      },
      "name": "@typescript-eslint/require-array-sort-compare",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/require-await": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow async functions which do not return promises and have no `await` expression",
        "extendsBaseRule": true,
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/require-await"
      },
      "hasSuggestions": true,
      "name": "@typescript-eslint/require-await",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/restrict-plus-operands": {
      "type": "problem",
      "docs": {
        "description": "Require both operands of addition to be the same type and be `bigint`, `number`, or `string`",
        "recommended": {
          "recommended": true,
          "strict": [
            {
              "allowAny": false,
              "allowBoolean": false,
              "allowNullish": false,
              "allowNumberAndString": false,
              "allowRegExp": false
            }
          ]
        },
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/restrict-plus-operands"
      },
      "name": "@typescript-eslint/restrict-plus-operands",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/restrict-template-expressions": {
      "type": "problem",
      "docs": {
        "description": "Enforce template literal expressions to be of `string` type",
        "recommended": {
          "recommended": true,
          "strict": [
            {
              "allowAny": false,
              "allowBoolean": false,
              "allowNever": false,
              "allowNullish": false,
              "allowNumber": false,
              "allowRegExp": false
            }
          ]
        },
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/restrict-template-expressions"
      },
      "name": "@typescript-eslint/restrict-template-expressions",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/return-await": {
      "type": "problem",
      "docs": {
        "description": "Enforce consistent awaiting of returned promises",
        "recommended": {
          "strict": ["error-handling-correctness-only"]
        },
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/return-await"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "@typescript-eslint/return-await",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/sort-type-constituents": {
      "type": "suggestion",
      "deprecated": {
        "deprecatedSince": "7.13.0",
        "replacedBy": [
          {
            "plugin": {
              "name": "eslint-plugin-perfectionist",
              "url": "https://perfectionist.dev"
            },
            "rule": {
              "name": "perfectionist/sort-intersection-types",
              "url": "https://perfectionist.dev/rules/sort-intersection-types"
            }
          },
          {
            "plugin": {
              "name": "eslint-plugin-perfectionist",
              "url": "https://perfectionist.dev"
            },
            "rule": {
              "name": "perfectionist/sort-union-types",
              "url": "https://perfectionist.dev/rules/sort-union-types"
            }
          }
        ],
        "url": "https://github.com/typescript-eslint/typescript-eslint/pull/9253"
      },
      "docs": {
        "description": "Enforce constituents of a type union/intersection to be sorted alphabetically",
        "url": "https://typescript-eslint.io/rules/sort-type-constituents"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "replacedBy": ["perfectionist/sort-intersection-types", "perfectionist/sort-union-types"],
      "name": "@typescript-eslint/sort-type-constituents",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/strict-boolean-expressions": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow certain types in boolean expressions",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/strict-boolean-expressions"
      },
      "hasSuggestions": true,
      "name": "@typescript-eslint/strict-boolean-expressions",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/switch-exhaustiveness-check": {
      "type": "suggestion",
      "docs": {
        "description": "Require switch-case statements to be exhaustive",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/switch-exhaustiveness-check"
      },
      "hasSuggestions": true,
      "name": "@typescript-eslint/switch-exhaustiveness-check",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/triple-slash-reference": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow certain triple slash directives in favor of ES6-style import declarations",
        "recommended": "recommended",
        "url": "https://typescript-eslint.io/rules/triple-slash-reference"
      },
      "name": "@typescript-eslint/triple-slash-reference",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/typedef": {
      "type": "suggestion",
      "docs": {
        "description": "Require type annotations in certain places",
        "url": "https://typescript-eslint.io/rules/typedef"
      },
      "name": "@typescript-eslint/typedef",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/unbound-method": {
      "type": "problem",
      "docs": {
        "description": "Enforce unbound methods are called with their expected scope",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/unbound-method"
      },
      "name": "@typescript-eslint/unbound-method",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/unified-signatures": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow two overloads that could be unified into one with a union or an optional/rest parameter",
        "recommended": "strict",
        "url": "https://typescript-eslint.io/rules/unified-signatures"
      },
      "name": "@typescript-eslint/unified-signatures",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/use-unknown-in-catch-callback-variable": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce typing arguments in Promise rejection callbacks as `unknown`",
        "recommended": "strict",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/use-unknown-in-catch-callback-variable"
      },
      "hasSuggestions": true,
      "name": "@typescript-eslint/use-unknown-in-catch-callback-variable",
      "plugin": "@typescript-eslint"
    }
  },
  "files": [
    {
      "filepath": ".eslint-config-inspector/_nuxt/BVroogsP.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": ".eslint-config-inspector/_nuxt/BmNWnaFO.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": ".eslint-config-inspector/_nuxt/BupVbMfq.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": ".eslint-config-inspector/_nuxt/CTNqAv02.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": ".eslint-config-inspector/_nuxt/CVO1_9PV.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": ".eslint-config-inspector/_nuxt/Cqmz7tCN.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": ".eslint-config-inspector/_nuxt/D0r3Knsf.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": ".eslint-config-inspector/_nuxt/D5p1_LJe.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": ".eslint-config-inspector/_nuxt/DBS2FFHD.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": ".eslint-config-inspector/_nuxt/DBXtF2pt.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": ".eslint-config-inspector/_nuxt/DQKmB4pA.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": ".eslint-config-inspector/_nuxt/Defcyui7.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": ".eslint-config-inspector/_nuxt/Dh-akTWs.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": ".eslint-config-inspector/_nuxt/DlAUqK2U.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": ".eslint-config-inspector/_nuxt/KJnl7Sfk.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": ".eslint-config-inspector/_nuxt/kw0LVqvE.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": ".yarn/releases/yarn-4.8.1.cjs",
      "globs": ["**/*.cjs"],
      "configs": [3]
    },
    {
      "filepath": "dist/assets/1-8uhCkuy3.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/10-0ndqFtlE.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/11-smv-HGos.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/12-CSJrPEr8.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/13-Tm92NIMt.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/14-BbR-Cpmr.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/15-CfdPQYVO.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/16-BaQWgF9h.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/17-ByZl2X9f.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/18-DhbNbZVf.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/19-Ct9qGEbP.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/2-Cr100pBK.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/20-CnD3LaIO.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/21-CK4onDB8.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/22-DbAKV1WK.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/23-J_U8sRXw.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/24-CpkJRsYu.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/25-qSf3S9Dq.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/26-BQ6X-ma7.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/27-6z64cOqp.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/28-BfMhQmNx.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/29-BXdJQSGD.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/3-BP2eLYwh.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/30-DD6o0aP0.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/31-mIEGNxE0.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/32-CLd6PnU5.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/33-CYgaT4Nt.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/34-DQjBJXt7.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/35-BGAxbyjO.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/36-D4ABdngs.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/37-C8MOnGvR.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/38-DV9bn_r1.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/39-DJJQgFAJ.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/4-B0aaA_QO.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/40--3Q44i_L.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/41-6-2MOYsW.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/42-BexaCpry.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/43-B5uPfMGa.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/44-B9tDj6ru.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/45-cD-_8Q6p.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/46-DFalDB3d.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/47-DDcNHgZ2.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/48-BwP1qoSr.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/49-DWckoRhd.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/5-xSl7U7j7.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/50-C7j6UE_y.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/51-BrYr4Tby.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/52-CR0N_1ep.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/6-Dld9J7MQ.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/7-ev4dsac2.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/8-ZJ4EVEtk.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/9--mvRbhmw.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/back-BO21RR0e.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/back2-DNH-vs6-.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/black-joker-D67rOT_b.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/close-DYn5qQD7.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/club-D2t0_kc8.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/diamond-CmzLvD9t.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/excalidraw-D_BnWEqL.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/file-DnNptXoG.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/flip-DiS00VzK.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/folder-D5hN1OEV.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/headers-BejRNEx6.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/heart-EkcdL5q_.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/index-BL-k6uch.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/index-CTn4UiVI.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/index-D-npulXx.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/index-DBpsE983.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/index-DNdN12Hf.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/index-DQWA8tJ0.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/index-DWBcdmL-.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/index-DhU39wdp.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/index-HCEllo37.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/index-Nfh4HVfQ.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/max-jS5uJdCe.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/middleware-CJYgAShz.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/min-44utQXBL.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/red-joker-B2CYjvgP.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/secret-Ltlofo0X.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/solitaire-ChbjiFfA.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/spade-CAYVoZ_S.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/terminal-BJEZ85aH.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "dist/assets/unmax-CIAlPMom.js",
      "globs": ["**/*.js"],
      "configs": [2]
    },
    {
      "filepath": "eslint.config.mjs",
      "globs": ["**/*.mjs"],
      "configs": [2]
    },
    {
      "filepath": "eslint.config.old.mjs",
      "globs": ["**/*.mjs"],
      "configs": [2]
    },
    {
      "filepath": "global.d.ts",
      "globs": ["**/*.ts"],
      "configs": [7, 10]
    },
    {
      "filepath": "src/app.tsx",
      "globs": ["src/**/*.tsx", "**/*.tsx"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/apps/excalidraw/context-menu/index.ts",
      "globs": ["src/**/*.ts", "**/*.ts"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/apps/excalidraw/index.tsx",
      "globs": ["src/**/*.tsx", "**/*.tsx"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/apps/headers/components/help-screen.tsx",
      "globs": ["src/**/*.tsx", "**/*.tsx"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/apps/headers/context-menu/index.ts",
      "globs": ["src/**/*.ts", "**/*.ts"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/apps/headers/index.tsx",
      "globs": ["src/**/*.tsx", "**/*.tsx"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/apps/headers/menubar/index.ts",
      "globs": ["src/**/*.ts", "**/*.ts"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/apps/headers/store/index.ts",
      "globs": ["src/**/*.ts", "**/*.ts"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/apps/hello-world.tsx",
      "globs": ["src/**/*.tsx", "**/*.tsx"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/apps/readme/context-menu/index.ts",
      "globs": ["src/**/*.ts", "**/*.ts"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/apps/readme/index.tsx",
      "globs": ["src/**/*.tsx", "**/*.tsx"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/apps/solitaire/components/card.tsx",
      "globs": ["src/**/*.tsx", "**/*.tsx"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/apps/solitaire/components/foundation-stack.tsx",
      "globs": ["src/**/*.tsx", "**/*.tsx"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/apps/solitaire/components/game-settings.tsx",
      "globs": ["src/**/*.tsx", "**/*.tsx"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/apps/solitaire/components/help-screen.tsx",
      "globs": ["src/**/*.tsx", "**/*.tsx"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/apps/solitaire/components/high-scores.tsx",
      "globs": ["src/**/*.tsx", "**/*.tsx"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/apps/solitaire/components/index.tsx",
      "globs": ["src/**/*.tsx", "**/*.tsx"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/apps/solitaire/components/stock-stack.tsx",
      "globs": ["src/**/*.tsx", "**/*.tsx"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/apps/solitaire/components/tableau-stack.tsx",
      "globs": ["src/**/*.tsx", "**/*.tsx"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/apps/solitaire/components/timer.tsx",
      "globs": ["src/**/*.tsx", "**/*.tsx"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/apps/solitaire/components/waste-stack.tsx",
      "globs": ["src/**/*.tsx", "**/*.tsx"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/apps/solitaire/components/win-screen.tsx",
      "globs": ["src/**/*.tsx", "**/*.tsx"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/apps/solitaire/context-menu/index.ts",
      "globs": ["src/**/*.ts", "**/*.ts"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/apps/solitaire/game.ts",
      "globs": ["src/**/*.ts", "**/*.ts"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/apps/solitaire/index.tsx",
      "globs": ["src/**/*.tsx", "**/*.tsx"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/apps/solitaire/menubar/index.tsx",
      "globs": ["src/**/*.tsx", "**/*.tsx"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/apps/solitaire/solitaire.game.test.ts",
      "globs": ["src/**/*.ts", "**/*.ts"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/apps/solitaire/store/index.ts",
      "globs": ["src/**/*.ts", "**/*.ts"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/apps/text-editor/context-menu/index.ts",
      "globs": ["src/**/*.ts", "**/*.ts"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/apps/text-editor/index.tsx",
      "globs": ["src/**/*.tsx", "**/*.tsx"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/components/global-events.tsx",
      "globs": ["src/**/*.tsx", "**/*.tsx"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/defaults/index.ts",
      "globs": ["src/**/*.ts", "**/*.ts"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/hooks/use-key-presses.tsx",
      "globs": ["src/**/*.tsx", "**/*.tsx"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/main.tsx",
      "globs": ["src/**/*.tsx", "**/*.tsx"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/system/context-menu/common/index.ts",
      "globs": ["src/**/*.ts", "**/*.ts"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/system/context-menu/hooks/index.tsx",
      "globs": ["src/**/*.tsx", "**/*.tsx"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/system/context-menu/index.tsx",
      "globs": ["src/**/*.tsx", "**/*.tsx"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/system/context-menu/utils/index.ts",
      "globs": ["src/**/*.ts", "**/*.ts"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/system/file-system/components/icon.tsx",
      "globs": ["src/**/*.tsx", "**/*.tsx"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/system/file-system/components/select-rect.tsx",
      "globs": ["src/**/*.tsx", "**/*.tsx"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/system/file-system/context-menu/index.ts",
      "globs": ["src/**/*.ts", "**/*.ts"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/system/file-system/desktop/index.tsx",
      "globs": ["src/**/*.tsx", "**/*.tsx"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/system/file-system/directory/index.tsx",
      "globs": ["src/**/*.tsx", "**/*.tsx"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/system/file-system/hooks/use-drag-select.tsx",
      "globs": ["src/**/*.tsx", "**/*.tsx"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/system/file-system/hooks/use-icon-drag.tsx",
      "globs": ["src/**/*.tsx", "**/*.tsx"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/system/file-system/hooks/use-icon-select.tsx",
      "globs": ["src/**/*.tsx", "**/*.tsx"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/system/file-system/index.tsx",
      "globs": ["src/**/*.tsx", "**/*.tsx"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/system/file-system/store/index.ts",
      "globs": ["src/**/*.ts", "**/*.ts"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/system/file-system/utils/index.ts",
      "globs": ["src/**/*.ts", "**/*.ts"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/system/menubar/hooks/index.tsx",
      "globs": ["src/**/*.tsx", "**/*.tsx"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/system/menubar/index.tsx",
      "globs": ["src/**/*.tsx", "**/*.tsx"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/system/taskbar/components/clock.tsx",
      "globs": ["src/**/*.tsx", "**/*.tsx"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/system/taskbar/components/taskbar-entry.tsx",
      "globs": ["src/**/*.tsx", "**/*.tsx"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/system/taskbar/index.tsx",
      "globs": ["src/**/*.tsx", "**/*.tsx"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/system/text-editor/store/index.tsx",
      "globs": ["src/**/*.tsx", "**/*.tsx"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/system/text-editor/types.ts",
      "globs": ["src/**/*.ts", "**/*.ts"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/system/wallpaper/index.tsx",
      "globs": ["src/**/*.tsx", "**/*.tsx"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/system/wallpaper/renderer.tsx",
      "globs": ["src/**/*.tsx", "**/*.tsx"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/system/window-system/components/loading.tsx",
      "globs": ["src/**/*.tsx", "**/*.tsx"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/system/window-system/components/maximized-window-header.tsx",
      "globs": ["src/**/*.tsx", "**/*.tsx"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/system/window-system/components/resize-handles.tsx",
      "globs": ["src/**/*.tsx", "**/*.tsx"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/system/window-system/components/window-header-button.tsx",
      "globs": ["src/**/*.tsx", "**/*.tsx"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/system/window-system/components/window-header.tsx",
      "globs": ["src/**/*.tsx", "**/*.tsx"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/system/window-system/components/window.tsx",
      "globs": ["src/**/*.tsx", "**/*.tsx"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/system/window-system/hooks/use-window-move.tsx",
      "globs": ["src/**/*.tsx", "**/*.tsx"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/system/window-system/hooks/use-window-resize.tsx",
      "globs": ["src/**/*.tsx", "**/*.tsx"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/system/window-system/index.tsx",
      "globs": ["src/**/*.tsx", "**/*.tsx"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/system/window-system/utils/index.ts",
      "globs": ["src/**/*.ts", "**/*.ts"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/themes/index.ts",
      "globs": ["src/**/*.ts", "**/*.ts"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/utils/format.ts",
      "globs": ["src/**/*.ts", "**/*.ts"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/utils/index.ts",
      "globs": ["src/**/*.ts", "**/*.ts"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "src/vite-env.d.ts",
      "globs": ["src/**/*.ts", "**/*.ts"],
      "configs": [4, 7, 10]
    },
    {
      "filepath": "svgo.config.cjs",
      "globs": ["**/*.cjs"],
      "configs": [3]
    },
    {
      "filepath": "tests/file-system.test.tsx",
      "globs": ["**/*.tsx"],
      "configs": [7, 10]
    },
    {
      "filepath": "tests/setup.ts",
      "globs": ["**/*.ts"],
      "configs": [7, 10]
    },
    {
      "filepath": "tests/snapping.test.ts",
      "globs": ["**/*.ts"],
      "configs": [7, 10]
    },
    {
      "filepath": "tests/text-editor-test.tsx",
      "globs": ["**/*.tsx"],
      "configs": [7, 10]
    },
    {
      "filepath": "vite-env.d.ts",
      "globs": ["**/*.ts"],
      "configs": [7, 10]
    },
    {
      "filepath": "vite.config.ts",
      "globs": ["**/*.ts"],
      "configs": [7, 10]
    }
  ],
  "meta": {
    "lastUpdate": 1744111225731,
    "basePath": "",
    "configPath": ""
  }
}
